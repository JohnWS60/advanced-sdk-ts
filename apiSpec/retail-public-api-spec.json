{
  "swagger": "2.0",
  "info": {
    "title": "Coinbase Advanced Trade API",
    "version": "0.1"
  },
  "host": "api.coinbase.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json",
    "text/event-stream"
  ],
  "paths": {
    "/api/v3/brokerage/accounts": {
      "get": {
        "summary": "List Accounts",
        "description": "Get a list of authenticated accounts for the current user.",
        "operationId": "RetailBrokerageApi_GetAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.GetAccountsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "The number of accounts to display per page. By default, displays 49 (max 250). If `has_next` is true, additional pages of accounts are available to be fetched. Use the `cursor` parameter to start on a specified page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "cursor",
            "description": "For paginated responses, returns all responses that come after this value.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "retail_portfolio_id",
            "description": "**(Deprecated)** Only returns the accounts matching the portfolio ID. Only applicable for legacy keys. CDP keys will default to the key's permissioned portfolio.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Accounts"
        ]
      }
    },
    "/api/v3/brokerage/accounts/{account_uuid}": {
      "get": {
        "summary": "Get Account",
        "description": "Get a list of information about an account, given an account UUID.",
        "operationId": "RetailBrokerageApi_GetAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.GetAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "account_uuid",
            "description": "The account's UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Accounts"
        ]
      }
    },
    "/api/v3/brokerage/best_bid_ask": {
      "get": {
        "summary": "Get Best Bid/Ask",
        "description": "Get the best bid/ask for all products. A subset of all products can be returned instead by using the product_ids input.",
        "operationId": "RetailBrokerageApi_GetBestBidAsk",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.GetBestBidAskResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_ids",
            "description": "The list of trading pairs (e.g. 'BTC-USD').",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/api/v3/brokerage/product_book": {
      "get": {
        "summary": "Get Product Book",
        "description": "Get a list of bids/asks for a single product. The amount of detail shown can be customized with the limit parameter.",
        "operationId": "RetailBrokerageApi_GetProductBook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.GetProductBookResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_id",
            "description": "The trading pair (e.g. 'BTC-USD').",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The number of bid/asks to be returned. ",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "aggregation_price_increment",
            "description": "The minimum price intervals at which buy and sell orders are grouped or combined in the order book.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/api/v3/brokerage/products": {
      "get": {
        "summary": "List Products",
        "description": "Get a list of the available currency pairs for trading.",
        "operationId": "RetailBrokerageApi_GetProducts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.Products"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "The number of products to be returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "description": "The number of products to skip before returning.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "product_type",
            "description": "Only returns the orders matching this product type. By default, returns all product types.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_PRODUCT_TYPE",
              "SPOT",
              "FUTURE"
            ],
            "default": "UNKNOWN_PRODUCT_TYPE"
          },
          {
            "name": "product_ids",
            "description": "The list of trading pairs (e.g. 'BTC-USD').",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "contract_expiry_type",
            "description": "Only returns the orders matching the contract expiry type. Only applicable if product_type is set to FUTURE.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_CONTRACT_EXPIRY_TYPE",
              "EXPIRING",
              "PERPETUAL"
            ],
            "default": "UNKNOWN_CONTRACT_EXPIRY_TYPE"
          },
          {
            "name": "expiring_contract_status",
            "description": "Only returns contracts with this status (default is UNEXPIRED).",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_EXPIRING_CONTRACT_STATUS",
              "STATUS_UNEXPIRED",
              "STATUS_EXPIRED",
              "STATUS_ALL"
            ],
            "default": "UNKNOWN_EXPIRING_CONTRACT_STATUS"
          },
          {
            "name": "get_tradability_status",
            "description": "Whether or not to populate view_only with the tradability status of the product. This is only enabled for SPOT products.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "get_all_products",
            "description": "If true, return all products of all product types (including expired futures contracts).",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/api/v3/brokerage/products/{product_id}": {
      "get": {
        "summary": "Get Product",
        "description": "Get information on a single product by product ID.",
        "operationId": "RetailBrokerageApi_GetProduct",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.Product"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_id",
            "description": "The trading pair (e.g. 'BTC-USD').",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "get_tradability_status",
            "description": "Whether or not to populate view_only with the tradability status of the product. This is only enabled for SPOT products.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/api/v3/brokerage/products/{product_id}/candles": {
      "get": {
        "summary": "Get Product Candles",
        "description": "Get rates for a single product by product ID, grouped in buckets.",
        "operationId": "RetailBrokerageApi_GetCandles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.Candles"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_id",
            "description": "The trading pair (e.g. 'BTC-USD').",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "description": "The UNIX timestamp indicating the start of the time interval.",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "end",
            "description": "The UNIX timestamp indicating the end of the time interval.",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "granularity",
            "description": "The timeframe each candle represents.",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "UNKNOWN_GRANULARITY",
              "ONE_MINUTE",
              "FIVE_MINUTE",
              "FIFTEEN_MINUTE",
              "THIRTY_MINUTE",
              "ONE_HOUR",
              "TWO_HOUR",
              "SIX_HOUR",
              "ONE_DAY"
            ],
            "default": "UNKNOWN_GRANULARITY"
          },
          {
            "name": "limit",
            "description": "The number of candle buckets to be returned. By default, returns 350 (max 350).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/api/v3/brokerage/products/{product_id}/ticker": {
      "get": {
        "summary": "Get Market Trades",
        "description": "Get snapshot information by product ID about the last trades (ticks) and best bid/ask.",
        "operationId": "RetailBrokerageApi_GetMarketTrades",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.GetMarketTradesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_id",
            "description": "The trading pair (e.g. 'BTC-USD').",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The number of trades to be returned. ",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "start",
            "description": "The UNIX timestamp indicating the start of the time interval.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "end",
            "description": "The UNIX timestamp indicating the end of the time interval.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/api/v3/brokerage/orders": {
      "post": {
        "summary": "Create Order",
        "description": "Create an order with a specified `product_id` (asset-pair), `side` (buy/sell), etc.",
        "operationId": "RetailBrokerageApi_PostOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.NewOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.NewOrderRequest"
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/v3/brokerage/orders/batch_cancel": {
      "post": {
        "summary": "Cancel Orders",
        "description": "Initiate cancel requests for one or more orders.",
        "operationId": "RetailBrokerageApi_CancelOrders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.CancelOrdersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.CancelOrdersRequest"
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/v3/brokerage/orders/edit": {
      "post": {
        "summary": "Edit Order",
        "description": "Edit an order with a specified new `size`, or new `price`.",
        "operationId": "RetailBrokerageApi_EditOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.EditOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.EditOrderRequest"
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/v3/brokerage/orders/edit_preview": {
      "post": {
        "summary": "Edit Order Preview",
        "description": "Preview an edit order request with a specified new `size`, or new `price`.",
        "operationId": "RetailBrokerageApi_PreviewEditOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.PreviewEditOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.EditOrderRequest"
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/v3/brokerage/orders/historical/batch": {
      "get": {
        "summary": "List Orders",
        "description": "Get a list of orders filtered by optional query parameters (`product_id`, `order_status`, etc).",
        "operationId": "RetailBrokerageApi_GetHistoricalOrders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.GetHistoricalOrdersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "order_ids",
            "description": "ID(s) of order(s).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "product_ids",
            "description": "Optional string of the product ID(s). Defaults to null, or fetch for all products.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "product_type",
            "description": "Returns orders matching this product type. By default, returns all product types.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_PRODUCT_TYPE",
              "SPOT",
              "FUTURE"
            ],
            "default": "UNKNOWN_PRODUCT_TYPE"
          },
          {
            "name": "order_status",
            "description": "Only returns orders matching the specified order statuses.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "PENDING",
                "OPEN",
                "FILLED",
                "CANCELLED",
                "EXPIRED",
                "FAILED",
                "UNKNOWN_ORDER_STATUS",
                "QUEUED",
                "CANCEL_QUEUED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "time_in_forces",
            "description": "Only orders matching this time in force(s) are returned. Default is to return all time in forces.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNKNOWN_TIME_IN_FORCE",
                "GOOD_UNTIL_DATE_TIME",
                "GOOD_UNTIL_CANCELLED",
                "IMMEDIATE_OR_CANCEL",
                "FILL_OR_KILL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order_types",
            "description": "Only returns orders matching the specified order types (e.g. MARKET). By default, returns all order types.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNKNOWN_ORDER_TYPE",
                "MARKET",
                "LIMIT",
                "STOP",
                "STOP_LIMIT",
                "BRACKET"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "order_side",
            "description": "Only returns the orders matching the specified side (e.g. 'BUY', 'SELL'). By default, returns all sides.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "BUY",
              "SELL"
            ],
            "default": ""
          },
          {
            "name": "start_date",
            "description": "The start date to fetch orders from (inclusive). If provided, only orders created after this date will be returned.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "RFC3339 Timestamp"
          },
          {
            "name": "end_date",
            "description": "The end date to fetch orders from (exclusive). If provided, only orders with creation time before this date will be returned.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "RFC3339 Timestamp"
          },
          {
            "name": "order_placement_source",
            "description": "Only returns the orders matching this placement source. By default, returns RETAIL_ADVANCED placement source.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_PLACEMENT_SOURCE",
              "RETAIL_SIMPLE",
              "RETAIL_ADVANCED"
            ],
            "default": "RETAIL_ADVANCED"
          },
          {
            "name": "contract_expiry_type",
            "description": "Only returns the orders matching the contract expiry type. Only applicable if product_type is set to FUTURE.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_CONTRACT_EXPIRY_TYPE",
              "EXPIRING",
              "PERPETUAL"
            ],
            "default": "UNKNOWN_CONTRACT_EXPIRY_TYPE"
          },
          {
            "name": "asset_filters",
            "description": "Only returns the orders where the quote, base or underlying asset matches the provided asset filter(s) (e.g. 'BTC').",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "retail_portfolio_id",
            "description": "**(Deprecated)** Only orders matching this retail portfolio id are returned. Only applicable for legacy keys. CDP keys will default to the key's permissioned portfolio.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The number of orders to display per page (no default amount). If `has_next` is true, additional pages of orders are available to be fetched. Use the `cursor` parameter to start on a specified page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "cursor",
            "description": "For paginated responses, returns all responses that come after this value.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by",
            "description": "Sort results by a field, results use unstable pagination. Default is to sort by creation time.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_SORT_BY",
              "LIMIT_PRICE",
              "LAST_FILL_TIME"
            ],
            "default": "UNKNOWN_SORT_BY"
          },
          {
            "name": "user_native_currency",
            "description": "**(Deprecated)**  Native currency to fetch order with. Default is `USD`.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/v3/brokerage/orders/historical/fills": {
      "get": {
        "summary": "List Fills",
        "description": "Get a list of fills filtered by optional query parameters (`product_id`, `order_id`, etc).",
        "operationId": "RetailBrokerageApi_GetFills",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.GetFillsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "order_ids",
            "description": "The ID(s) of order(s).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "trade_ids",
            "description": "The ID(s) of the trades of fills.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "product_ids",
            "description": "The ID(s) of the product(s) to filter fills by.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "start_sequence_timestamp",
            "description": "Only fills with a trade time after the specified start date are returned.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "RFC3339 Timestamp"
          },
          {
            "name": "end_sequence_timestamp",
            "description": "Only fills with a trade time before the specified end date are returned.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "RFC3339 Timestamp"
          },
          {
            "name": "retail_portfolio_id",
            "description": "**(Deprecated)** Only fills matching this retail portfolio id are returned. Only applicable for legacy keys. CDP keys will default to the key's permissioned portfolio.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The number of fills to be returned (default is 100).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cursor",
            "description": "For paginated responses, returns all responses that come after this value.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by",
            "description": "Sort results by a field, results use unstable pagination. Default is sort by creation time",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_SORT_BY",
              "PRICE",
              "TRADE_TIME"
            ],
            "default": "UNKNOWN_SORT_BY"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/v3/brokerage/orders/historical/{order_id}": {
      "get": {
        "summary": "Get Order",
        "description": "Get a single order by order ID.",
        "operationId": "RetailBrokerageApi_GetHistoricalOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.GetHistoricalOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "description": "The ID of the order.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "client_order_id",
            "description": "**(Deprecated)** Client Order ID to fetch the order with.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user_native_currency",
            "description": "**(Deprecated)**  Native currency to fetch order with. Default is `USD`.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/v3/brokerage/orders/preview": {
      "post": {
        "summary": "Preview Order",
        "description": "Preview an order.",
        "operationId": "RetailBrokerageApi_PreviewOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.OrderPreviewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.OrderPreviewRequest"
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/v3/brokerage/orders/close_position": {
      "post": {
        "summary": "Close Position",
        "description": "Places an order to close any open positions for a specified `product_id`.",
        "operationId": "RetailBrokerageApi_ClosePosition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.ClosePositionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.ClosePositionRequest"
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/v3/brokerage/portfolios": {
      "get": {
        "summary": "List Portfolios",
        "description": "Get all portfolios of a user.",
        "operationId": "RetailBrokerageApi_GetPortfolios",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.GetPortfoliosResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_type",
            "description": "Only returns portfolios matching this portfolio type.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNDEFINED",
              "DEFAULT",
              "CONSUMER",
              "INTX"
            ],
            "default": "UNDEFINED"
          }
        ],
        "tags": [
          "Portfolios"
        ]
      },
      "post": {
        "summary": "Create Portfolio",
        "description": "Create a portfolio.",
        "operationId": "RetailBrokerageApi_CreatePortfolio",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.CreatePortfolioResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.CreatePortfolioRequest"
            }
          }
        ],
        "tags": [
          "Portfolios"
        ]
      }
    },
    "/api/v3/brokerage/portfolios/move_funds": {
      "post": {
        "summary": "Move Portfolio Funds",
        "description": "Move funds between portfolios.",
        "operationId": "RetailBrokerageApi_MovePortfolioFunds",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.MovePortfolioFundsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.MovePortfolioFundsRequest"
            }
          }
        ],
        "tags": [
          "Portfolios"
        ]
      }
    },
    "/api/v3/brokerage/portfolios/{portfolio_uuid}": {
      "get": {
        "summary": "Get Portfolio Breakdown",
        "description": "Get the breakdown of a portfolio.",
        "operationId": "RetailBrokerageApi_GetPortfolioBreakdown",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.GetPortfolioBreakdownResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_uuid",
            "description": "The portfolio UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "currency",
            "description": "The currency symbol (e.g. USD).",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Portfolios"
        ]
      },
      "delete": {
        "summary": "Delete Portfolio",
        "description": "Delete portfolio.",
        "operationId": "RetailBrokerageApi_DeletePortfolio",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.DeletePortfolioResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_uuid",
            "description": "The portfolio UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Portfolios"
        ]
      },
      "put": {
        "summary": "Edit Portfolio",
        "description": "Edit a portfolio.",
        "operationId": "RetailBrokerageApi_EditPortfolio",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.EditPortfolioResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_uuid",
            "description": "The portfolio UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.EditPortfolioRequest"
            }
          }
        ],
        "tags": [
          "Portfolios"
        ]
      }
    },
    "/api/v3/brokerage/cfm/balance_summary": {
      "get": {
        "summary": "Get Futures Balance Summary",
        "description": "Get a summary of balances for CFM trading",
        "operationId": "RetailBrokerageApi_GetFCMBalanceSummary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.GetFCMBalanceSummaryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "Futures"
        ]
      }
    },
    "/api/v3/brokerage/cfm/intraday/margin_setting": {
      "get": {
        "summary": "Get Intraday Margin Setting",
        "description": "Get the futures intraday margin setting",
        "operationId": "RetailBrokerageApi_GetIntradayMarginSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.GetIntradayMarginSettingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "Futures"
        ]
      },
      "post": {
        "summary": "Set Intraday Margin Setting",
        "description": "Set the futures intraday margin setting",
        "operationId": "RetailBrokerageApi_SetIntradayMarginSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.SetIntradayMarginSettingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.SetIntradayMarginSettingRequest"
            }
          }
        ],
        "tags": [
          "Futures"
        ]
      }
    },
    "/api/v3/brokerage/cfm/intraday/current_margin_window": {
      "get": {
        "summary": "Get Current Margin Window",
        "description": "Get the futures current margin window",
        "operationId": "RetailBrokerageApi_GetCurrentMarginWindow",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.GetCurrentMarginWindowResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "margin_profile_type",
            "description": "The margin profile type for your account.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "MARGIN_PROFILE_TYPE_UNSPECIFIED",
              "MARGIN_PROFILE_TYPE_RETAIL_REGULAR",
              "MARGIN_PROFILE_TYPE_RETAIL_INTRADAY_MARGIN_1"
            ],
            "default": "MARGIN_PROFILE_TYPE_UNSPECIFIED"
          }
        ],
        "tags": [
          "Futures"
        ]
      }
    },
    "/api/v3/brokerage/cfm/positions": {
      "get": {
        "summary": "List Futures Positions",
        "description": "Get a list of positions in CFM products",
        "operationId": "RetailBrokerageApi_GetFCMPositions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.GetFCMPositionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "Futures"
        ]
      }
    },
    "/api/v3/brokerage/cfm/positions/{product_id}": {
      "get": {
        "summary": "Get Futures Position",
        "description": "Get positions for a specific CFM product",
        "operationId": "RetailBrokerageApi_GetFCMPosition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.GetFCMPositionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_id",
            "description": "The ticker symbol (e.g. 'BIT-28JUL23-CDE').",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Futures"
        ]
      }
    },
    "/api/v3/brokerage/cfm/sweeps/schedule": {
      "post": {
        "summary": "Schedule Futures Sweep",
        "description": "Schedules a sweep of funds from FCM wallet to USD Spot wallet",
        "operationId": "RetailBrokerageApi_ScheduleFCMSweep",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.ScheduleFCMSweepResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.ScheduleFCMSweepRequest"
            }
          }
        ],
        "tags": [
          "Futures"
        ]
      }
    },
    "/api/v3/brokerage/cfm/sweeps": {
      "get": {
        "summary": "List Futures Sweeps",
        "description": "Get pending and processing sweeps of funds from FCM wallet to USD Spot wallet",
        "operationId": "RetailBrokerageApi_GetFCMSweeps",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.GetFCMSweepsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "Futures"
        ]
      },
      "delete": {
        "summary": "Cancel Pending Futures Sweep",
        "description": "Cancel the pending sweep of funds from FCM wallet to USD Spot wallet",
        "operationId": "RetailBrokerageApi_CancelFCMSweep",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.CancelFCMSweepResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "Futures"
        ]
      }
    },
    "/api/v3/brokerage/intx/allocate": {
      "post": {
        "summary": "Allocate Portfolio",
        "description": "Allocate portfolio funds to a sub-portfolio on Intx Portfolio",
        "operationId": "RetailBrokerageApi_AllocatePortfolio",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.AllocatePortfolioResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.AllocatePortfolioRequest"
            }
          }
        ],
        "tags": [
          "Perpetuals"
        ]
      }
    },
    "/api/v3/brokerage/intx/portfolio/{portfolio_uuid}": {
      "get": {
        "summary": "Get Perpetuals Portfolio Summary",
        "description": "Get a summary of your Perpetuals portfolio",
        "operationId": "RetailBrokerageApi_GetIntxPortfolioSummary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.GetPortfoliosResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_uuid",
            "description": "The portfolio UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Perpetuals"
        ]
      }
    },
    "/api/v3/brokerage/intx/positions/{portfolio_uuid}": {
      "get": {
        "summary": "List Perpetuals Positions",
        "description": "Get a list of open positions in your Perpetuals portfolio",
        "operationId": "RetailBrokerageApi_GetIntxPositions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.GetPositionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_uuid",
            "description": "The portfolio UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Perpetuals"
        ]
      }
    },
    "/api/v3/brokerage/intx/positions/{portfolio_uuid}/{symbol}": {
      "get": {
        "summary": "Get Perpetuals Position",
        "description": "Get a specific open position on Intx",
        "operationId": "RetailBrokerageApi_GetIntxPosition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.GetPositionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_uuid",
            "description": "The portfolio UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "symbol",
            "description": "The trading pair (e.g. 'BTC-PERP-INTX').",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Perpetuals"
        ]
      }
    },
    "/api/v3/brokerage/intx/balances/{portfolio_uuid}": {
      "get": {
        "summary": "Get Portfolios Balances",
        "description": "Get a list of asset balances on Intx for a given Portfolio",
        "operationId": "RetailBrokerageApi_GetIntxBalances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.intx_common.GetBalanceSummaryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "portfolio_uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Perpetuals"
        ]
      }
    },
    "/api/v3/brokerage/intx/multi_asset_collateral": {
      "post": {
        "summary": "Opt In or Out of Multi Asset Collateral",
        "description": "Enable or Disable Multi Asset Collateral for a given Portfolio",
        "operationId": "RetailBrokerageApi_IntxMultiAssetCollateral",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.MultiAssetCollateralResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.MultiAssetCollateralRequest"
            }
          }
        ],
        "tags": [
          "Perpetuals"
        ]
      }
    },
    "/api/v3/brokerage/transaction_summary": {
      "get": {
        "summary": "Get Transaction Summary",
        "description": "Get a summary of transactions with fee tiers, total volume, and fees.",
        "operationId": "RetailBrokerageApi_GetTransactionSummary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.GetTransactionSummaryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_type",
            "description": "Only returns the orders matching this product type. By default, returns all product types.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_PRODUCT_TYPE",
              "SPOT",
              "FUTURE"
            ],
            "default": "UNKNOWN_PRODUCT_TYPE"
          },
          {
            "name": "contract_expiry_type",
            "description": "Only returns the orders matching this contract expiry type. Only applicable if product_type is set to FUTURE.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_CONTRACT_EXPIRY_TYPE",
              "EXPIRING",
              "PERPETUAL"
            ],
            "default": "UNKNOWN_CONTRACT_EXPIRY_TYPE"
          },
          {
            "name": "product_venue",
            "description": "Venue for product",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_VENUE_TYPE",
              "CBE",
              "FCM",
              "INTX"
            ],
            "default": "UNKNOWN_VENUE_TYPE"
          }
        ],
        "tags": [
          "Fees"
        ]
      }
    },
    "/api/v3/brokerage/convert/quote": {
      "post": {
        "summary": "Create Convert Quote",
        "description": "Create a convert quote with a specified source account, target account, and amount. Convert is applicable for USDC-USD and EURC-EUR conversion",
        "operationId": "RetailBrokerageApi_CreateConvertQuote",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.convert.CreateConvertQuoteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.convert.CreateConvertQuoteRequest"
            }
          }
        ],
        "tags": [
          "Converts"
        ]
      }
    },
    "/api/v3/brokerage/convert/trade/{trade_id}": {
      "get": {
        "summary": "Get Convert Trade",
        "description": "Gets a list of information about a convert trade with a specified trade id, source account, and target account",
        "operationId": "RetailBrokerageApi_GetConvertTrade",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.convert.GetConvertTradeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "trade_id",
            "description": "The ID of the trade to commit.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "from_account",
            "description": "The currency of the account to convert from (e.g. USD).",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to_account",
            "description": "The currency of the account to convert to (e.g. USDC).",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Converts"
        ]
      },
      "post": {
        "summary": "Commit Convert Trade",
        "description": "Commits a convert trade with a specified trade id, source account, and target account",
        "operationId": "RetailBrokerageApi_CommitConvertTrade",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.convert.CommitConvertTradeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "trade_id",
            "description": "The ID of the trade to commit.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.convert.CommitConvertTradeRequest"
            }
          }
        ],
        "tags": [
          "Converts"
        ]
      }
    },
    "/api/v3/brokerage/time": {
      "get": {
        "summary": "Get Server Time",
        "description": "Get the current time from the Coinbase Advanced API.",
        "operationId": "RetailBrokerageApi_GetServerTime",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.common.ExtendedTimestamp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "Public"
        ]
      }
    },
    "/api/v3/brokerage/market/product_book": {
      "get": {
        "summary": "Get Public Product Book",
        "description": "Get a list of bids/asks for a single product. The amount of detail shown can be customized with the limit parameter.",
        "operationId": "RetailBrokerageApi_GetPublicProductBook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.GetProductBookResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_id",
            "description": "The trading pair (e.g. 'BTC-USD').",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The number of bid/asks to be returned. ",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "aggregation_price_increment",
            "description": "The minimum price intervals at which buy and sell orders are grouped or combined in the order book.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Public"
        ]
      }
    },
    "/api/v3/brokerage/market/products": {
      "get": {
        "summary": "List Public Products",
        "description": "Get a list of the available currency pairs for trading.",
        "operationId": "RetailBrokerageApi_GetPublicProducts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.Products"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "The number of products to be returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "description": "The number of products to skip before returning.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "product_type",
            "description": "Only returns the orders matching this product type. By default, returns all product types.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_PRODUCT_TYPE",
              "SPOT",
              "FUTURE"
            ],
            "default": "UNKNOWN_PRODUCT_TYPE"
          },
          {
            "name": "product_ids",
            "description": "The list of trading pairs (e.g. 'BTC-USD').",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "contract_expiry_type",
            "description": "Only returns the orders matching the contract expiry type. Only applicable if product_type is set to FUTURE.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_CONTRACT_EXPIRY_TYPE",
              "EXPIRING",
              "PERPETUAL"
            ],
            "default": "UNKNOWN_CONTRACT_EXPIRY_TYPE"
          },
          {
            "name": "expiring_contract_status",
            "description": "Only returns contracts with this status (default is UNEXPIRED).",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_EXPIRING_CONTRACT_STATUS",
              "STATUS_UNEXPIRED",
              "STATUS_EXPIRED",
              "STATUS_ALL"
            ],
            "default": "UNKNOWN_EXPIRING_CONTRACT_STATUS"
          },
          {
            "name": "get_all_products",
            "description": "If true, return all products of all product types (including expired futures contracts).",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Public"
        ]
      }
    },
    "/api/v3/brokerage/market/products/{product_id}": {
      "get": {
        "summary": "Get Public Product",
        "description": "Get information on a single product by product ID.",
        "operationId": "RetailBrokerageApi_GetPublicProduct",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.Product"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_id",
            "description": "The trading pair (e.g. 'BTC-USD').",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Public"
        ]
      }
    },
    "/api/v3/brokerage/market/products/{product_id}/candles": {
      "get": {
        "summary": "Get Public Product Candles",
        "description": "Get rates for a single product by product ID, grouped in buckets.",
        "operationId": "RetailBrokerageApi_GetPublicCandles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.Candles"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_id",
            "description": "The trading pair (e.g. 'BTC-USD').",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "description": "The UNIX timestamp indicating the start of the time interval.",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "end",
            "description": "The UNIX timestamp indicating the end of the time interval.",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "granularity",
            "description": "The timeframe each candle represents.",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "UNKNOWN_GRANULARITY",
              "ONE_MINUTE",
              "FIVE_MINUTE",
              "FIFTEEN_MINUTE",
              "THIRTY_MINUTE",
              "ONE_HOUR",
              "TWO_HOUR",
              "SIX_HOUR",
              "ONE_DAY"
            ],
            "default": "UNKNOWN_GRANULARITY"
          },
          {
            "name": "limit",
            "description": "The number of candle buckets to be returned. By default, returns 350 (max 350).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Public"
        ]
      }
    },
    "/api/v3/brokerage/market/products/{product_id}/ticker": {
      "get": {
        "summary": "Get Public Market Trades",
        "description": "Get snapshot information by product ID about the last trades (ticks) and best bid/ask.",
        "operationId": "RetailBrokerageApi_GetPublicMarketTrades",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.GetMarketTradesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "product_id",
            "description": "The trading pair (e.g. 'BTC-USD').",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "The number of trades to be returned. ",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "start",
            "description": "The UNIX timestamp indicating the start of the time interval.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "end",
            "description": "The UNIX timestamp indicating the end of the time interval.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Public"
        ]
      }
    },
    "/api/v3/brokerage/payment_methods": {
      "get": {
        "summary": "List Payment Methods",
        "description": "Get a list of payment methods for the current user.",
        "operationId": "RetailBrokerageApi_GetPaymentMethods",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.payment_method.GetPaymentMethodsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "Payment Methods"
        ]
      }
    },
    "/api/v3/brokerage/payment_methods/{payment_method_id}": {
      "get": {
        "summary": "Get Payment Method",
        "description": "Get information about a payment method for the current user.",
        "operationId": "RetailBrokerageApi_GetPaymentMethod",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.payment_method.GetPaymentMethodResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "payment_method_id",
            "description": "The ID of the payment method. Refer to [List Payment Methods](https://docs.cdp.coinbase.com/advanced-trade/reference/retailbrokerageapi_getpaymentmethods/) for the list of all available payment methods and their corresponding IDs.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Payment Methods"
        ]
      }
    },
    "/api/v3/brokerage/key_permissions": {
      "get": {
        "summary": "Get API Key Permissions",
        "description": "Get information about your CDP API key permissions",
        "operationId": "RetailBrokerageApi_GetApiKeyPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.utility.GetApiKeyPermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "Data API"
        ]
      }
    }
  },
  "definitions": {
    "coinbase.brokerage.types.Decimal": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "String representation allows for unlimited precision."
        }
      },
      "description": "Represents a decimal number with precision."
    },
    "coinbase.consumer.shared.common.Amount": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        }
      },
      "title": "Message that represents the monetary amount."
    },
    "coinbase.consumer.shared.common.Link": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "title": "In-app hyperlink, commonly used to reference support pages.\ne.g. Link(text: \"Learn More\", url: \"https://help.coinbase.com/...\")"
    },
    "coinbase.intx_common.Asset": {
      "type": "object",
      "properties": {
        "asset_id": {
          "type": "string"
        },
        "asset_uuid": {
          "type": "string"
        },
        "asset_name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "collateral_weight": {
          "type": "string"
        },
        "account_collateral_limit": {
          "type": "string"
        },
        "ecosystem_collateral_limit_breached": {
          "type": "boolean"
        },
        "asset_icon_url": {
          "type": "string"
        },
        "supported_networks_enabled": {
          "type": "boolean"
        }
      }
    },
    "coinbase.intx_common.Balance": {
      "type": "object",
      "properties": {
        "asset": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.intx_common.Asset"
            }
          ]
        },
        "quantity": {
          "type": "string"
        },
        "hold": {
          "type": "string"
        },
        "transfer_hold": {
          "type": "string"
        },
        "collateral_value": {
          "type": "string"
        },
        "collateral_weight": {
          "type": "string"
        },
        "max_withdraw_amount": {
          "type": "string"
        },
        "loan": {
          "type": "string"
        },
        "loan_collateral_requirement_usd": {
          "type": "string"
        },
        "pledged_quantity": {
          "type": "string"
        }
      }
    },
    "coinbase.intx_common.GetBalanceSummaryResponse": {
      "type": "object",
      "properties": {
        "portfolio_balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.intx_common.PortfolioBalance"
          }
        }
      }
    },
    "coinbase.intx_common.PortfolioBalance": {
      "type": "object",
      "properties": {
        "portfolio_uuid": {
          "type": "string"
        },
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.intx_common.Balance"
          }
        },
        "is_margin_limit_reached": {
          "type": "boolean"
        }
      }
    },
    "coinbase.intx_common.PortfolioLiquidationStatus": {
      "type": "string",
      "enum": [
        "PORTFOLIO_LIQUIDATION_STATUS_UNSPECIFIED",
        "PORTFOLIO_LIQUIDATION_STATUS_CANCELING",
        "PORTFOLIO_LIQUIDATION_STATUS_AUTO_LIQUIDATING",
        "PORTFOLIO_LIQUIDATION_STATUS_LSP_ASSIGNMENT",
        "PORTFOLIO_LIQUIDATION_STATUS_CUSTOMER_ASSIGNMENT",
        "PORTFOLIO_LIQUIDATION_STATUS_MANUAL",
        "PORTFOLIO_LIQUIDATION_STATUS_NOT_LIQUIDATING"
      ],
      "default": "PORTFOLIO_LIQUIDATION_STATUS_UNSPECIFIED"
    },
    "coinbase.intx_common.PortfolioMarginFlags": {
      "type": "string",
      "enum": [
        "PORTFOLIO_MARGIN_FLAGS_UNSPECIFIED",
        "PORTFOLIO_MARGIN_FLAGS_IN_LIQUIDATION"
      ],
      "default": "PORTFOLIO_MARGIN_FLAGS_UNSPECIFIED"
    },
    "coinbase.intx_common.PortfolioMarginType": {
      "type": "string",
      "enum": [
        "MARGIN_TYPE_UNSPECIFIED",
        "MARGIN_TYPE_CROSS",
        "MARGIN_TYPE_ISOLATED"
      ],
      "default": "MARGIN_TYPE_UNSPECIFIED"
    },
    "coinbase.intx_common.PositionSide": {
      "type": "string",
      "enum": [
        "POSITION_SIDE_UNKNOWN",
        "POSITION_SIDE_LONG",
        "POSITION_SIDE_SHORT"
      ],
      "default": "POSITION_SIDE_UNKNOWN"
    },
    "coinbase.payments.common.Address": {
      "type": "object",
      "properties": {
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "country": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.DigitalWalletDetails": {
      "type": "object",
      "properties": {
        "nonce": {
          "type": "string"
        },
        "correlation_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.Money": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        }
      },
      "description": "A quantity of money."
    },
    "coinbase.payments.common.payment_methods.Address": {
      "type": "object",
      "properties": {
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "country": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.Allocation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "legs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.payments.common.payment_methods.AllocationLeg"
          }
        },
        "is_netted": {
          "type": "boolean"
        }
      }
    },
    "coinbase.payments.common.payment_methods.AllocationLeg": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "movements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.payments.common.payment_methods.FundMovement"
          }
        },
        "is_netted": {
          "type": "boolean"
        }
      }
    },
    "coinbase.payments.common.payment_methods.ApplePay": {
      "type": "object",
      "properties": {
        "braintree": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.ApplePay.BraintreeData"
            }
          ]
        },
        "apple_pay": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.DigitalWalletDetails"
            }
          ]
        },
        "user_id": {
          "type": "string"
        },
        "postal_code": {
          "type": "string",
          "title": "The following fields can be populated on the PM after an order\nis submitted in the InstructionResponse. They should not be filled in\na normal order Instruction though"
        },
        "customer_name": {
          "type": "string"
        },
        "address": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Address"
            }
          ]
        },
        "six_digit_bin": {
          "type": "string"
        },
        "last_four": {
          "type": "string"
        },
        "issuing_country": {
          "type": "string"
        },
        "issuing_bank": {
          "type": "string"
        },
        "product_id": {
          "type": "string"
        },
        "scheme": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.ApplePay.Scheme"
            }
          ]
        },
        "prepaid": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.ApplePay.Result"
            }
          ]
        },
        "debit": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.ApplePay.Result"
            }
          ]
        }
      },
      "title": "uniquely identifies a user's Coinbase account"
    },
    "coinbase.payments.common.payment_methods.ApplePay.BraintreeData": {
      "type": "object",
      "properties": {
        "nonce": {
          "type": "string"
        },
        "correlation_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.ApplePay.Result": {
      "type": "string",
      "enum": [
        "UNCERTAIN",
        "TRUE",
        "FALSE"
      ],
      "default": "UNCERTAIN"
    },
    "coinbase.payments.common.payment_methods.ApplePay.Scheme": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "VISA",
        "MASTERCARD"
      ],
      "default": "UNKNOWN"
    },
    "coinbase.payments.common.payment_methods.BankAccount": {
      "type": "object",
      "properties": {
        "customer_account_type": {
          "type": "string"
        },
        "customer_account_number": {
          "type": "string"
        },
        "customer_routing_number": {
          "type": "string"
        },
        "customer_name": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.BlockchainAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "destination_tag": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.BlockchainTransaction": {
      "type": "object",
      "properties": {
        "hsh": {
          "type": "string"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "coinbase.payments.common.payment_methods.CTN": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.Card": {
      "type": "object",
      "properties": {
        "first_data_token": {
          "title": "set by payment initiator ",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.FirstDataToken"
            }
          ]
        },
        "expiry_date": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.ExpiryDate"
            }
          ]
        },
        "postal_code": {
          "type": "string"
        },
        "merchant": {
          "title": "set by satellite after processing",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Merchant"
            }
          ]
        },
        "vault_token": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.VaultToken"
            }
          ]
        },
        "worldpay_params": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.WorldpayParams"
            }
          ]
        },
        "previous_scheme_tx_id": {
          "type": "string"
        },
        "customer_name": {
          "type": "string"
        },
        "address": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Address"
            }
          ]
        },
        "phone_number": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "customer_first_name": {
          "type": "string"
        },
        "customer_last_name": {
          "type": "string"
        },
        "six_digit_bin": {
          "type": "string"
        },
        "last_four": {
          "type": "string"
        },
        "customer_dob": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Card.Dob"
            }
          ]
        },
        "scheme": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Card.Scheme"
            }
          ]
        }
      },
      "title": "The card as a payment method source or target"
    },
    "coinbase.payments.common.payment_methods.Card.Dob": {
      "type": "object",
      "properties": {
        "month": {
          "type": "string"
        },
        "day": {
          "type": "string"
        },
        "year": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.Card.Scheme": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "VISA",
        "MASTERCARD"
      ],
      "default": "UNKNOWN"
    },
    "coinbase.payments.common.payment_methods.Cbit": {
      "type": "object",
      "properties": {
        "cbit_wallet_address": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.CheckoutPaymentLink": {
      "type": "object",
      "properties": {
        "payment_link_id": {
          "type": "string"
        }
      },
      "title": "unique identifier for a checkout.com payment link"
    },
    "coinbase.payments.common.payment_methods.CoinbaseAccount": {
      "type": "object",
      "properties": {
        "account_id": {
          "type": "string"
        }
      },
      "title": "uniquely identifies a user's Coinbase account"
    },
    "coinbase.payments.common.payment_methods.CustodialPool": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "fiat_id": {
          "type": "string"
        }
      },
      "title": "note this is to support transaction logs where everything is expected to be a pm for a transfers source and target"
    },
    "coinbase.payments.common.payment_methods.DAppWalletAccount": {
      "type": "object",
      "properties": {
        "user_uuid": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "cohort_id": {
          "type": "string"
        }
      },
      "title": "uniquely identifies a user's dapp wallet account/address"
    },
    "coinbase.payments.common.payment_methods.DAppWalletBlockchainAddress": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "cohort_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.DefaultAccount": {
      "type": "object",
      "properties": {
        "user_uuid": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.DenebIMPS": {
      "type": "object",
      "properties": {
        "ifsc_code": {
          "type": "string"
        },
        "account_number": {
          "type": "string"
        },
        "customer_first_name": {
          "type": "string"
        },
        "customer_last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "pan": {
          "type": "string"
        },
        "address": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Address"
            }
          ]
        }
      }
    },
    "coinbase.payments.common.payment_methods.DenebUPI": {
      "type": "object",
      "properties": {
        "vpa_id": {
          "type": "string"
        },
        "customer_first_name": {
          "type": "string"
        },
        "customer_last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "pan": {
          "type": "string"
        },
        "address": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Address"
            }
          ]
        }
      }
    },
    "coinbase.payments.common.payment_methods.DerivativeSettlement": {
      "type": "object",
      "properties": {
        "account_settlements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.payments.common.payment_methods.DerivativeSettlement.AccountSettlement"
          },
          "title": "derivative EOD settlement can involve one or more fund movements"
        },
        "equity_reset": {
          "title": "optionally reset CFM equity account",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.DerivativeSettlement.EquityReset"
            }
          ]
        }
      }
    },
    "coinbase.payments.common.payment_methods.DerivativeSettlement.AccountSettlement": {
      "type": "object",
      "properties": {
        "amount": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.Money"
            }
          ]
        },
        "source_ledger_account": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.LedgerAccount"
            }
          ]
        },
        "source_ledger_named_account": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.LedgerNamedAccount"
            }
          ]
        },
        "target_ledger_account": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.LedgerAccount"
            }
          ]
        },
        "target_ledger_named_account": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.LedgerNamedAccount"
            }
          ]
        },
        "hold_id_to_replace": {
          "type": "string",
          "title": "Deprecated, use existing_hold_id instead"
        },
        "new_hold_id": {
          "type": "string",
          "title": "account settlement can optionally replace an existing hold with\n`hold_id_to_replace` to a new hold with `new_hold_id` and amount\nof `new_hold_amount`"
        },
        "new_hold_amount": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.Money"
            }
          ]
        },
        "existing_hold_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.DerivativeSettlement.EquityReset": {
      "type": "object",
      "properties": {
        "amount": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.Money"
            }
          ]
        },
        "equity_account": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.LedgerAccount"
            }
          ]
        }
      }
    },
    "coinbase.payments.common.payment_methods.DirectDeposit": {
      "type": "object",
      "properties": {
        "direct_deposit_account": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.EmailAddress": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.ExpiryDate": {
      "type": "object",
      "properties": {
        "month": {
          "type": "string"
        },
        "year": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.ExternalPaymentMethod": {
      "type": "object",
      "properties": {
        "payment_method_id": {
          "type": "string"
        }
      },
      "title": "uniquely identifies am external payment method in the Payment Method Service"
    },
    "coinbase.payments.common.payment_methods.Fedwire": {
      "type": "object",
      "properties": {
        "routing_number": {
          "type": "string",
          "title": "sender_payment_instruction_id "
        },
        "account_holder": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.FedwireAccount"
            }
          ]
        },
        "bank": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.FedwireInstitution"
            }
          ]
        },
        "intermediary_bank": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.FedwireInstitution"
            }
          ]
        }
      },
      "title": "Fedwire contains all information necessary to initiate a payment to/from a fedwire eligible bank account.\nFormat based on the Fedwire Format Reference Guide Nov 2014"
    },
    "coinbase.payments.common.payment_methods.FedwireAccount": {
      "type": "object",
      "properties": {
        "legal_name": {
          "type": "string"
        },
        "account_number": {
          "type": "string"
        },
        "address": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.FedwireAddress"
            }
          ]
        }
      },
      "title": "FedwireAccount represents an account at a financial insitition eligible for Fedwire"
    },
    "coinbase.payments.common.payment_methods.FedwireAddress": {
      "type": "object",
      "properties": {
        "lines": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "country_code": {
          "type": "string"
        }
      },
      "description": "FedwireAddress in an address ... no more, no less."
    },
    "coinbase.payments.common.payment_methods.FedwireInstitution": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "address": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.FedwireAddress"
            }
          ]
        },
        "identifier": {
          "type": "string"
        },
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.FedwireInstitution.Type"
            }
          ]
        },
        "identifier_code": {
          "type": "string"
        }
      },
      "description": "FedwireInstitution is usually a bank, but can also be credit unions or other financial institutions."
    },
    "coinbase.payments.common.payment_methods.FedwireInstitution.Type": {
      "type": "string",
      "enum": [
        "CHIPS_IDENTIFIER",
        "CHIPS_PARTICIPANT",
        "DDA",
        "FEDWIRE",
        "SWIFT_BIC",
        "SWIFT_BIC_OR_BEI_AND_ACCOUNT",
        "PASSPORT_NUMBER",
        "TAX_IDENTIFICATION_NUMBER",
        "DRIVERS_LICENSE_NUMBER",
        "ALIEN_REGISTRATION_NUMBER",
        "CORPORATE_IDENTIFICATION_NUMBER",
        "OTHER_IDENTIFICATION",
        "UNKNOWN"
      ],
      "default": "CHIPS_IDENTIFIER"
    },
    "coinbase.payments.common.payment_methods.FirstDataToken": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "store_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.FundMovement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "source_account": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.LedgerAccount"
            }
          ]
        },
        "destination_account": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.LedgerAccount"
            }
          ]
        },
        "amount": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.Money"
            }
          ]
        }
      }
    },
    "coinbase.payments.common.payment_methods.GooglePay": {
      "type": "object",
      "properties": {
        "braintree": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.GooglePay.BraintreeData"
            }
          ]
        },
        "google_pay": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.DigitalWalletDetails"
            }
          ]
        },
        "user_id": {
          "type": "string"
        },
        "postal_code": {
          "type": "string",
          "title": "The following fields can be populated on the PM after an order\nis submitted in the InstructionResponse. They should not be filled in\na normal order Instruction though"
        },
        "customer_name": {
          "type": "string"
        },
        "address": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Address"
            }
          ]
        },
        "six_digit_bin": {
          "type": "string"
        },
        "last_four": {
          "type": "string"
        },
        "issuing_country": {
          "type": "string"
        },
        "issuing_bank": {
          "type": "string"
        },
        "product_id": {
          "type": "string"
        },
        "scheme": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.GooglePay.Scheme"
            }
          ]
        },
        "prepaid": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.GooglePay.Result"
            }
          ]
        },
        "debit": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.GooglePay.Result"
            }
          ]
        }
      },
      "title": "uniquely identifies a user's Coinbase account"
    },
    "coinbase.payments.common.payment_methods.GooglePay.BraintreeData": {
      "type": "object",
      "properties": {
        "nonce": {
          "type": "string"
        },
        "correlation_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.GooglePay.Result": {
      "type": "string",
      "enum": [
        "UNCERTAIN",
        "TRUE",
        "FALSE"
      ],
      "default": "UNCERTAIN"
    },
    "coinbase.payments.common.payment_methods.GooglePay.Scheme": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "VISA",
        "MASTERCARD"
      ],
      "default": "UNKNOWN"
    },
    "coinbase.payments.common.payment_methods.Ideal": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string"
        },
        "iban": {
          "type": "string"
        },
        "bic": {
          "type": "string"
        },
        "bank_name": {
          "type": "string"
        },
        "customer_payment_name": {
          "type": "string"
        },
        "customer_country_code": {
          "type": "string"
        }
      },
      "title": ""
    },
    "coinbase.payments.common.payment_methods.IdentityContractCall": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "address": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.Interac": {
      "type": "object",
      "properties": {
        "account": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Interac.Account"
            }
          ]
        }
      }
    },
    "coinbase.payments.common.payment_methods.Interac.Account": {
      "type": "object",
      "properties": {
        "account_name": {
          "type": "string",
          "title": "Name of the account fulfilling the Request Money Transaction"
        },
        "institution_number": {
          "type": "string",
          "description": "Institution Number: a 3-digit code that tells you which bank the account belongs to \u2014 unique for every Canadian bank."
        },
        "transit_number": {
          "type": "string",
          "description": "Transit Number: a 5-digit code that tells which branch of the bank the account was created at \u2014 it is unique to each bank branch."
        },
        "account_number": {
          "type": "string",
          "description": "Account Number: a 7-digit code that identifies the account within the branch and bank entered."
        }
      }
    },
    "coinbase.payments.common.payment_methods.IntraBank": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string"
        },
        "account_number": {
          "type": "string"
        },
        "routing_number": {
          "type": "string"
        },
        "customer_name": {
          "type": "string"
        },
        "fiat_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.LedgerAccount": {
      "type": "object",
      "properties": {
        "account_id": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "owner": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Owner"
            }
          ]
        }
      },
      "title": "uniquely identifies an account in the Ledger Service"
    },
    "coinbase.payments.common.payment_methods.LedgerNamedAccount": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "foreign_network": {
          "type": "string"
        }
      },
      "title": "uniquely identifies a named account in the Ledger Service"
    },
    "coinbase.payments.common.payment_methods.LiquidityPool": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "pool": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "account_id": {
          "type": "string"
        }
      },
      "title": "For the purpose of Liquidity Management"
    },
    "coinbase.payments.common.payment_methods.Merchant": {
      "type": "object",
      "properties": {
        "mid": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.Owner": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "user_uuid": {
          "type": "string"
        },
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Owner.Type"
            }
          ]
        }
      }
    },
    "coinbase.payments.common.payment_methods.Owner.Type": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "INVESTMENT_VEHICLE",
        "RETAIL",
        "VENUE",
        "PORTFOLIO"
      ],
      "default": "UNKNOWN"
    },
    "coinbase.payments.common.payment_methods.PaymentMethod": {
      "type": "object",
      "properties": {
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.PaymentMethod.Type"
            }
          ]
        },
        "network": {
          "type": "string"
        },
        "blockchain_address": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.BlockchainAddress"
            }
          ]
        },
        "coinbase_account": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.CoinbaseAccount"
            }
          ]
        },
        "blockchain_transaction": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.BlockchainTransaction"
            }
          ]
        },
        "fedwire": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Fedwire"
            }
          ]
        },
        "swift": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Swift"
            }
          ]
        },
        "card": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Card"
            }
          ]
        },
        "zengin": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Zengin"
            }
          ]
        },
        "uk": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Uk"
            }
          ]
        },
        "sepa": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Sepa"
            }
          ]
        },
        "paypal": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Paypal"
            }
          ]
        },
        "ledger_account": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.LedgerAccount"
            }
          ]
        },
        "external_payment_method": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.ExternalPaymentMethod"
            }
          ]
        },
        "pro_account": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.ProAccount"
            }
          ]
        },
        "rtp": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Rtp"
            }
          ]
        },
        "venue": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Venue"
            }
          ]
        },
        "ledger_named_account": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.LedgerNamedAccount"
            }
          ]
        },
        "custodial_pool": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.CustodialPool"
            }
          ]
        },
        "apple_pay": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.ApplePay"
            }
          ]
        },
        "default_account": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.DefaultAccount"
            }
          ]
        },
        "remitly": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Remitly"
            }
          ]
        },
        "pro_internal_account": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.ProInternalAccount"
            }
          ]
        },
        "dapp_wallet_account": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.DAppWalletAccount"
            }
          ]
        },
        "google_pay": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.GooglePay"
            }
          ]
        },
        "dapp_wallet_blockchain_address": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.DAppWalletBlockchainAddress"
            }
          ]
        },
        "zaakpay_mobikwik": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.ZaakpayMobikwik"
            }
          ]
        },
        "deneb_upi": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.DenebUPI"
            }
          ]
        },
        "bank_account": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.BankAccount"
            }
          ]
        },
        "identity_contract_call": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.IdentityContractCall"
            }
          ]
        },
        "deneb_imps": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.DenebIMPS"
            }
          ]
        },
        "allocation": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Allocation"
            }
          ]
        },
        "liquidity_pool": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.LiquidityPool"
            }
          ]
        },
        "zengin_v2": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.ZenginV2"
            }
          ]
        },
        "direct_deposit": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.DirectDeposit"
            }
          ]
        },
        "sepa_v2": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.SepaV2"
            }
          ]
        },
        "zepto": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Zepto"
            }
          ]
        },
        "pix_ebanx": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.PixEbanx"
            }
          ]
        },
        "signet": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Signet"
            }
          ]
        },
        "derivative_settlement": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.DerivativeSettlement"
            }
          ]
        },
        "user": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.User"
            }
          ]
        },
        "sg_fast": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.SgFast"
            }
          ]
        },
        "interac": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Interac"
            }
          ]
        },
        "intra_bank": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.IntraBank"
            }
          ]
        },
        "cbit": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Cbit"
            }
          ]
        },
        "ideal": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Ideal"
            }
          ]
        },
        "sofort": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.Sofort"
            }
          ]
        },
        "sg_paynow": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.SgPayNow"
            }
          ]
        },
        "checkout_payment_link": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.CheckoutPaymentLink"
            }
          ]
        },
        "email_address": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.EmailAddress"
            }
          ]
        },
        "phone_number": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.PhoneNumber"
            }
          ]
        },
        "vendor_payment": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.VendorPayment"
            }
          ]
        },
        "ctn": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.CTN"
            }
          ]
        }
      },
      "title": "PaymentMethod is a wrapper describing a specific type of payment method.\n this is probably the only type you need to modify (and possibly VerificationRequest/Response)"
    },
    "coinbase.payments.common.payment_methods.PaymentMethod.Type": {
      "type": "string",
      "enum": [
        "INVALID",
        "UNSET",
        "BLOCKCHAIN_ADDRESS",
        "COINBASE_ACCOUNT",
        "BLOCKCHAIN_TRANSACTION",
        "FEDWIRE",
        "SWIFT",
        "CARD",
        "ZENGIN",
        "UK",
        "SEPA",
        "PAYPAL",
        "LEDGER_ACCOUNT",
        "EXTERNAL_PAYMENT_METHOD",
        "PRO_ACCOUNT",
        "RTP",
        "CARD_REPRESENTMENT",
        "VENUE",
        "LEDGER_NAMED_ACCOUNT",
        "CUSTODIAL_POOL",
        "APPLE_PAY",
        "DEFAULT_ACCOUNT",
        "REMITLY",
        "PRO_INTERNAL_ACCOUNT",
        "DAPP_WALLET_ACCOUNT",
        "GOOGLE_PAY",
        "DAPP_WALLET_BLOCKCHAIN_ADDRESS",
        "ZAAKPAY_MOBIKWIK",
        "DENEB_UPI",
        "BANK_ACCOUNT",
        "IDENTITY_CONTRACT_CALL",
        "DENEB_IMPS",
        "ALLOCATION",
        "LIQUIDITY_POOL",
        "ZENGIN_V2",
        "DIRECT_DEPOSIT",
        "SEPA_V2",
        "ZEPTO",
        "PIX_EBANX",
        "SIGNET",
        "DERIVATIVE_SETTLEMENT",
        "USER",
        "SG_FAST",
        "INTERAC",
        "INTRA_BANK",
        "CBIT",
        "IDEAL",
        "SOFORT",
        "SG_PAYNOW",
        "CHECKOUT_PAYMENT_LINK",
        "EMAIL_ADDRESS",
        "PHONE_NUMBER",
        "VENDOR_PAYMENT",
        "CTN"
      ],
      "default": "INVALID"
    },
    "coinbase.payments.common.payment_methods.Paypal": {
      "type": "object",
      "properties": {
        "account_holder": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.PaypalAccount"
            }
          ]
        },
        "merchant": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.PaypalMerchant"
            }
          ]
        }
      }
    },
    "coinbase.payments.common.payment_methods.PaypalAccount": {
      "type": "object",
      "properties": {
        "paypal_id": {
          "type": "string"
        },
        "paypal_pm_id": {
          "type": "string"
        }
      },
      "title": "Represents a customer's paypal account"
    },
    "coinbase.payments.common.payment_methods.PaypalMerchant": {
      "type": "object",
      "properties": {
        "merchant_account_id": {
          "type": "string"
        }
      },
      "title": "Represents coinbase's merchant account\nFor payouts, this is the source of funds"
    },
    "coinbase.payments.common.payment_methods.PhoneNumber": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.PixEbanx": {
      "type": "object",
      "properties": {
        "payment_method_id": {
          "type": "string"
        },
        "user_uuid": {
          "type": "string"
        },
        "deposit": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.PixEbanx.PixDeposit"
            }
          ]
        },
        "withdrawal": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.PixEbanx.PixWithdrawal"
            }
          ]
        }
      }
    },
    "coinbase.payments.common.payment_methods.PixEbanx.PixDeposit": {
      "type": "object",
      "properties": {
        "transaction_id": {
          "type": "string"
        },
        "account_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.PixEbanx.PixWithdrawal": {
      "type": "object",
      "properties": {
        "account_number": {
          "type": "string"
        },
        "account_type": {
          "type": "string"
        },
        "bank_code": {
          "type": "string"
        },
        "branch_number": {
          "type": "string"
        },
        "pix_key": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.ProAccount": {
      "type": "object",
      "properties": {
        "account_id": {
          "type": "string"
        },
        "coinbase_account_id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "portfolio_id": {
          "type": "string"
        }
      },
      "title": "uniquely identifies an account on Pro"
    },
    "coinbase.payments.common.payment_methods.ProInternalAccount": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        }
      },
      "title": "uniquely identifies an internal account on Pro"
    },
    "coinbase.payments.common.payment_methods.Remitly": {
      "type": "object",
      "properties": {
        "account_holder": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.RemitlyAccount"
            }
          ]
        }
      }
    },
    "coinbase.payments.common.payment_methods.RemitlyAccount": {
      "type": "object",
      "properties": {
        "recipient_id": {
          "type": "string"
        },
        "payout_method_type": {
          "type": "string"
        }
      },
      "title": "Represents a customer in remitly"
    },
    "coinbase.payments.common.payment_methods.Rtp": {
      "type": "object",
      "properties": {
        "account_holder": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.RtpAccount"
            }
          ]
        },
        "institution": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.RtpInstitution"
            }
          ]
        }
      },
      "description": "For withdrawals: contains all info to initiate payment to eligible bank account.\nFor deposits: contains info to initiate payment to a Coinbase Fiat account."
    },
    "coinbase.payments.common.payment_methods.RtpAccount": {
      "type": "object",
      "properties": {
        "legal_name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        }
      },
      "title": "RtpAccount represents an account at a financial institution eligible for RTP network payments"
    },
    "coinbase.payments.common.payment_methods.RtpInstitution": {
      "type": "object",
      "properties": {
        "routing_number": {
          "type": "string"
        }
      },
      "title": "RtpInstitution is financial institution eligible for RTP network payments"
    },
    "coinbase.payments.common.payment_methods.Sepa": {
      "type": "object",
      "properties": {
        "account_holder": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.SepaAccount"
            }
          ]
        },
        "institution": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.SepaInstitution"
            }
          ]
        },
        "customer_first_name": {
          "type": "string"
        },
        "customer_last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.SepaAccount": {
      "type": "object",
      "properties": {
        "legal_name": {
          "type": "string"
        },
        "iban": {
          "type": "string"
        },
        "bban": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.SepaAccountDetail": {
      "type": "object",
      "properties": {
        "legal_name": {
          "type": "string",
          "description": "Required. Legal name of the account holder."
        },
        "iban": {
          "type": "string",
          "description": "Required. The IBAN number identifies the account."
        }
      },
      "description": "The detailed SEPA account information."
    },
    "coinbase.payments.common.payment_methods.SepaInstitution": {
      "type": "object",
      "properties": {
        "bic": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.SepaV2": {
      "type": "object",
      "properties": {
        "account": {
          "description": "The SEPA account details.",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.SepaAccountDetail"
            }
          ]
        },
        "customer_first_name": {
          "type": "string"
        },
        "customer_last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        },
        "customer_country": {
          "type": "string",
          "description": "Customer's country in ISO-3166-1 ALPHA-2."
        },
        "address": {
          "description": "Deprecated. Address was required for Banking Circle ",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.Address"
            }
          ]
        },
        "supports_open_banking": {
          "type": "boolean",
          "description": "Meant to be used for routing in PGS."
        }
      },
      "description": "SepaV2 identifies for the payment method SEPA_V2"
    },
    "coinbase.payments.common.payment_methods.SgFast": {
      "type": "object",
      "properties": {
        "account": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.SgFastAccount"
            }
          ]
        },
        "institution": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.SgFastInstitution"
            }
          ]
        }
      },
      "description": "SgFast identifies the FAST Bank Transfer payment method in Singapore."
    },
    "coinbase.payments.common.payment_methods.SgFastAccount": {
      "type": "object",
      "properties": {
        "customer_name": {
          "type": "string"
        },
        "account_number": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.SgFastInstitution": {
      "type": "object",
      "properties": {
        "bank_code": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.SgPayNow": {
      "type": "object",
      "properties": {
        "identifier_type": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.SgPayNow.IdentifierType"
            }
          ]
        },
        "identifier": {
          "type": "string"
        },
        "customer_name": {
          "type": "string"
        }
      },
      "description": "SgPayNow identifies the PayNow Transfer payment method in Singapore."
    },
    "coinbase.payments.common.payment_methods.SgPayNow.IdentifierType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_NRIC",
        "TYPE_PHONE"
      ],
      "default": "TYPE_UNSPECIFIED"
    },
    "coinbase.payments.common.payment_methods.Signet": {
      "type": "object",
      "properties": {
        "signet_wallet_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.Sofort": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string"
        },
        "iban": {
          "type": "string"
        },
        "bic": {
          "type": "string"
        },
        "bank_name": {
          "type": "string"
        },
        "customer_payment_name": {
          "type": "string"
        },
        "customer_country_code": {
          "type": "string"
        }
      },
      "title": ""
    },
    "coinbase.payments.common.payment_methods.Swift": {
      "type": "object",
      "properties": {
        "account_holder": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.SwiftAccount"
            }
          ]
        },
        "institution": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.SwiftInstitution"
            }
          ]
        },
        "intermediary": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.SwiftInstitution"
            }
          ]
        }
      }
    },
    "coinbase.payments.common.payment_methods.SwiftAccount": {
      "type": "object",
      "properties": {
        "legal_name": {
          "type": "string"
        },
        "iban": {
          "type": "string"
        },
        "bban": {
          "type": "string"
        },
        "domestic_account_id": {
          "type": "string"
        },
        "customer_payment_address1": {
          "type": "string"
        },
        "customer_payment_address2": {
          "type": "string"
        },
        "customer_payment_address3": {
          "type": "string"
        },
        "customer_payment_country_code": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.SwiftInstitution": {
      "type": "object",
      "properties": {
        "bic": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "bank_address1": {
          "type": "string"
        },
        "bank_address2": {
          "type": "string"
        },
        "bank_address3": {
          "type": "string"
        },
        "bank_country_code": {
          "type": "string"
        },
        "domestic_bank_id": {
          "type": "string"
        },
        "international_bank_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.Uk": {
      "type": "object",
      "properties": {
        "account_holder": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.UkAccount"
            }
          ]
        },
        "institution": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.UkInstitution"
            }
          ]
        },
        "customer_first_name": {
          "type": "string"
        },
        "customer_last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.UkAccount": {
      "type": "object",
      "properties": {
        "legal_name": {
          "type": "string"
        },
        "bban": {
          "type": "string"
        },
        "sort_code": {
          "type": "string"
        },
        "account_number": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.UkInstitution": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.User": {
      "type": "object",
      "properties": {
        "user_uuid": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.VaultToken": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "vault_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.VendorPayment": {
      "type": "object",
      "properties": {
        "vendor_name": {
          "type": "string"
        },
        "vendor_payment_id": {
          "type": "string"
        }
      },
      "title": "vendor payment is currenly only used by coinbase pay guest checkout"
    },
    "coinbase.payments.common.payment_methods.Venue": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.WorldpayParams": {
      "type": "object",
      "properties": {
        "token_value": {
          "type": "string"
        },
        "uses_merchant_token": {
          "type": "boolean"
        },
        "accept_header": {
          "type": "string"
        },
        "user_agent_header": {
          "type": "string"
        },
        "shopper_ip": {
          "type": "string"
        },
        "shopper_session_id": {
          "type": "string"
        }
      }
    },
    "coinbase.payments.common.payment_methods.ZaakpayMobikwik": {
      "type": "object",
      "properties": {
        "phone_number": {
          "type": "string"
        }
      },
      "description": "Represents a customer's mobikwik account."
    },
    "coinbase.payments.common.payment_methods.Zengin": {
      "type": "object",
      "properties": {
        "account_holder": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.ZenginAccount"
            }
          ]
        },
        "institution": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.ZenginInstitution"
            }
          ]
        }
      },
      "description": "For withdrawals: contains all info to initiate payment to a Zengin eligible bank account. (MUFG-only)\nFor deposits: contains info to initiate payment to a Coinbase Fiat account."
    },
    "coinbase.payments.common.payment_methods.ZenginAccount": {
      "type": "object",
      "properties": {
        "legal_name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "ZenginAccount represents an account at a financial institution eligible for Zengin"
    },
    "coinbase.payments.common.payment_methods.ZenginInstitution": {
      "type": "object",
      "properties": {
        "bank_code": {
          "type": "string"
        },
        "branch_code": {
          "type": "string"
        }
      },
      "title": "ZenginInstitution is financial institution eligible for Zengin"
    },
    "coinbase.payments.common.payment_methods.ZenginV2": {
      "type": "object",
      "properties": {
        "account_holder": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.ZenginV2Account"
            }
          ]
        },
        "institution": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.ZenginV2Institution"
            }
          ]
        }
      },
      "description": "For withdrawals: contains all info to initiate payment to a Zengin eligible bank account (non-MUFG).\nFor deposits: contains info to initiate payment to a Coinbase Fiat account."
    },
    "coinbase.payments.common.payment_methods.ZenginV2Account": {
      "type": "object",
      "properties": {
        "legal_name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "ZenginV2Account represents an account at a financial institution eligible for Zengin (non-MUFG)"
    },
    "coinbase.payments.common.payment_methods.ZenginV2Institution": {
      "type": "object",
      "properties": {
        "bank_code": {
          "type": "string"
        },
        "branch_code": {
          "type": "string"
        }
      },
      "title": "ZenginV2Institution is financial institution eligible for Zengin (non-MUFG)"
    },
    "coinbase.payments.common.payment_methods.Zepto": {
      "type": "object",
      "properties": {
        "account": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.ZeptoAccount"
            }
          ]
        }
      },
      "description": "Zepto identifies for the payment method ZEPTO."
    },
    "coinbase.payments.common.payment_methods.ZeptoAccount": {
      "type": "object",
      "properties": {
        "contact_id": {
          "type": "string",
          "description": "The Zepto contact ID (UUID) of the account.\n\nIt is \"Contact.data.id\" in Zepto API (https://docs.zepto.money)."
        },
        "bank_account_id": {
          "type": "string",
          "description": "The Zepto bank account ID (UUID) of contact.\n\nIt is \"contact.data.bank_account.id\" in Zepto API (https://docs.zepto.money)."
        }
      },
      "description": "Zepto account information."
    },
    "coinbase.portfolio_service.Amount": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The amount of specified currency.",
          "required": true
        },
        "currency": {
          "type": "string",
          "required": true,
          "description": "The currency symbol (e.g. USD)."
        }
      },
      "description": "Represents a monetary amount."
    },
    "coinbase.portfolio_service.BalancePair": {
      "type": "object",
      "properties": {
        "userNativeCurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.Amount"
            }
          ]
        },
        "rawCurrency": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.Amount"
            }
          ]
        }
      }
    },
    "coinbase.portfolio_service.FuturesPosition": {
      "type": "object",
      "properties": {
        "product_id": {
          "type": "string"
        },
        "contract_size": {
          "type": "string"
        },
        "side": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.FuturesPositionSide"
            }
          ]
        },
        "amount": {
          "type": "string"
        },
        "avg_entry_price": {
          "type": "string"
        },
        "current_price": {
          "type": "string"
        },
        "unrealized_pnl": {
          "type": "string"
        },
        "expiry": {
          "type": "string",
          "format": "RFC3339 Timestamp"
        },
        "underlying_asset": {
          "type": "string"
        },
        "asset_img_url": {
          "type": "string"
        },
        "product_name": {
          "type": "string"
        },
        "venue": {
          "type": "string"
        },
        "notional_value": {
          "type": "string"
        }
      },
      "title": "FuturesPosition represents a futures position"
    },
    "coinbase.portfolio_service.FuturesPositionSide": {
      "type": "string",
      "enum": [
        "FUTURES_POSITION_SIDE_UNSPECIFIED",
        "FUTURES_POSITION_SIDE_LONG",
        "FUTURES_POSITION_SIDE_SHORT"
      ],
      "default": "FUTURES_POSITION_SIDE_UNSPECIFIED"
    },
    "coinbase.portfolio_service.PerpPosition": {
      "type": "object",
      "properties": {
        "product_id": {
          "type": "string"
        },
        "product_uuid": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "asset_image_url": {
          "type": "string"
        },
        "vwap": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.BalancePair"
            }
          ]
        },
        "position_side": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.FuturesPositionSide"
            }
          ]
        },
        "net_size": {
          "type": "string"
        },
        "buy_order_size": {
          "type": "string"
        },
        "sell_order_size": {
          "type": "string"
        },
        "im_contribution": {
          "type": "string"
        },
        "unrealized_pnl": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.BalancePair"
            }
          ]
        },
        "mark_price": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.BalancePair"
            }
          ]
        },
        "liquidation_price": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.BalancePair"
            }
          ]
        },
        "leverage": {
          "type": "string"
        },
        "im_notional": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.BalancePair"
            }
          ]
        },
        "mm_notional": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.BalancePair"
            }
          ]
        },
        "position_notional": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.BalancePair"
            }
          ]
        },
        "margin_type": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.PortfolioMarginType"
            }
          ]
        },
        "liquidation_buffer": {
          "type": "string"
        },
        "liquidation_percentage": {
          "type": "string"
        }
      }
    },
    "coinbase.portfolio_service.Portfolio": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.PortfolioType"
            }
          ]
        },
        "deleted": {
          "type": "boolean"
        }
      },
      "title": "Portfolio is the identifying information for a portfolio"
    },
    "coinbase.portfolio_service.PortfolioBalances": {
      "type": "object",
      "properties": {
        "total_balance": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.Amount"
            }
          ]
        },
        "total_futures_balance": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.Amount"
            }
          ]
        },
        "total_cash_equivalent_balance": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.Amount"
            }
          ]
        },
        "total_crypto_balance": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.Amount"
            }
          ]
        },
        "futures_unrealized_pnl": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.Amount"
            }
          ]
        },
        "perp_unrealized_pnl": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.Amount"
            }
          ]
        }
      },
      "title": "PortfolioBalances is a summary of all balances within a given portfolio"
    },
    "coinbase.portfolio_service.PortfolioBreakdown": {
      "type": "object",
      "properties": {
        "portfolio": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.Portfolio"
            }
          ]
        },
        "portfolio_balances": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.PortfolioBalances"
            }
          ]
        },
        "spot_positions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.portfolio_service.PortfolioPosition"
          }
        },
        "perp_positions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.portfolio_service.PerpPosition"
          }
        },
        "futures_positions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.portfolio_service.FuturesPosition"
          }
        }
      },
      "title": "PortfolioBreakdown is a breakdown of a portfolio, all balances, and all positions within the portfolio"
    },
    "coinbase.portfolio_service.PortfolioMarginType": {
      "type": "string",
      "enum": [
        "MARGIN_TYPE_UNSPECIFIED",
        "MARGIN_TYPE_CROSS",
        "MARGIN_TYPE_ISOLATED"
      ],
      "default": "MARGIN_TYPE_UNSPECIFIED"
    },
    "coinbase.portfolio_service.PortfolioPosition": {
      "type": "object",
      "properties": {
        "asset": {
          "type": "string"
        },
        "account_uuid": {
          "type": "string"
        },
        "total_balance_fiat": {
          "type": "number",
          "format": "float"
        },
        "total_balance_crypto": {
          "type": "number",
          "format": "float"
        },
        "available_to_trade_fiat": {
          "type": "number",
          "format": "float"
        },
        "allocation": {
          "type": "number",
          "format": "float"
        },
        "one_day_change": {
          "type": "number",
          "format": "float"
        },
        "cost_basis": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.Amount"
            }
          ]
        },
        "asset_img_url": {
          "type": "string"
        },
        "is_cash": {
          "type": "boolean"
        }
      },
      "title": "PortfolioPosition represents a spot position for a user in a portfolio"
    },
    "coinbase.portfolio_service.PortfolioType": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "DEFAULT",
        "CONSUMER",
        "INTX"
      ],
      "default": "UNDEFINED"
    },
    "coinbase.public_api.authed.retail_brokerage_api.Account": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "example": "8bfc20d7-f7c6-4422-bf07-8243ca4169fe",
          "description": "Unique identifier for account."
        },
        "name": {
          "type": "string",
          "example": "BTC Wallet",
          "description": "Name for the account."
        },
        "currency": {
          "type": "string",
          "example": "BTC",
          "description": "Currency symbol for the account."
        },
        "available_balance": {
          "description": "Available balance in the account.",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.Amount"
            }
          ]
        },
        "default": {
          "type": "boolean",
          "example": false,
          "description": "Whether or not this account is the user's primary account"
        },
        "active": {
          "type": "boolean",
          "example": true,
          "description": "Whether or not this account is active and okay to use."
        },
        "created_at": {
          "type": "string",
          "format": "RFC3339 Timestamp",
          "example": "2021-05-31T09:59:59Z",
          "description": "Time at which this account was created."
        },
        "updated_at": {
          "type": "string",
          "format": "RFC3339 Timestamp",
          "example": "2021-05-31T09:59:59Z",
          "description": "Time at which this account was updated."
        },
        "deleted_at": {
          "type": "string",
          "format": "RFC3339 Timestamp",
          "example": "2021-05-31T09:59:59Z",
          "description": "Time at which this account was deleted."
        },
        "type": {
          "example": "FIAT",
          "description": "What type the account is.",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.AccountType"
            }
          ]
        },
        "ready": {
          "type": "boolean",
          "example": true,
          "description": "Whether or not this account is ready to trade."
        },
        "hold": {
          "description": "Amount that is being held for pending transfers against the available balance.",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.Amount"
            }
          ]
        },
        "retail_portfolio_id": {
          "type": "string",
          "example": "b87a2d3f-8a1e-49b3-a4ea-402d8c389aca",
          "description": "The ID of the portfolio this account is associated with."
        },
        "platform": {
          "example": "ACCOUNT_PLATFORM_CONSUMER",
          "description": "Platform indicates if the account is for spot (CONSUMER), US Derivatives (CFM_CONSUMER), or International Exchange (INTX).",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.AccountPlatform"
            }
          ]
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.AccountPlatform": {
      "type": "string",
      "enum": [
        "ACCOUNT_PLATFORM_UNSPECIFIED",
        "ACCOUNT_PLATFORM_CONSUMER",
        "ACCOUNT_PLATFORM_CFM_CONSUMER",
        "ACCOUNT_PLATFORM_INTX"
      ],
      "default": "ACCOUNT_PLATFORM_UNSPECIFIED"
    },
    "coinbase.public_api.authed.retail_brokerage_api.AccountType": {
      "type": "string",
      "enum": [
        "ACCOUNT_TYPE_UNSPECIFIED",
        "ACCOUNT_TYPE_CRYPTO",
        "ACCOUNT_TYPE_FIAT",
        "ACCOUNT_TYPE_VAULT",
        "ACCOUNT_TYPE_PERP_FUTURES"
      ],
      "default": "ACCOUNT_TYPE_UNSPECIFIED",
      "title": "Account type defines the type of account that is supported"
    },
    "coinbase.public_api.authed.retail_brokerage_api.Amount": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "example": "1.23",
          "description": "Amount of currency that this object represents.",
          "required": [
            "value"
          ]
        },
        "currency": {
          "type": "string",
          "example": "BTC",
          "description": "Denomination of the currency.",
          "required": [
            "currency"
          ]
        }
      },
      "required": [
        "value",
        "currency"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.BestBidAskGetProductBookConfig": {
      "type": "object",
      "properties": {
        "product_ids": {
          "type": "array",
          "example": [
            "BTC-USD",
            "ETH-USD"
          ],
          "items": {
            "type": "string"
          },
          "description": "The list of trading pairs (e.g. 'BTC-USD').",
          "required": [
            "product_ids"
          ]
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.CancelOrderFailureReason": {
      "type": "string",
      "enum": [
        "UNKNOWN_CANCEL_FAILURE_REASON",
        "INVALID_CANCEL_REQUEST",
        "UNKNOWN_CANCEL_ORDER",
        "COMMANDER_REJECTED_CANCEL_ORDER",
        "DUPLICATE_CANCEL_REQUEST",
        "INVALID_CANCEL_PRODUCT_ID",
        "INVALID_CANCEL_FCM_TRADING_SESSION",
        "NOT_ALLOWED_TO_CANCEL",
        "ORDER_IS_FULLY_FILLED",
        "ORDER_IS_BEING_REPLACED"
      ],
      "default": "UNKNOWN_CANCEL_FAILURE_REASON",
      "title": "- UNKNOWN_CANCEL_FAILURE_REASON: nil value\n - INVALID_CANCEL_REQUEST: Internal error when placing cancel request\n - UNKNOWN_CANCEL_ORDER: Internal error when placing cancel request\n - COMMANDER_REJECTED_CANCEL_ORDER: Internal error when placing cancel request\n - DUPLICATE_CANCEL_REQUEST: Cancel request was placed prior for the same order\n - INVALID_CANCEL_PRODUCT_ID: Invalid product id\n - INVALID_CANCEL_FCM_TRADING_SESSION: Invalid FCM trading session\n - NOT_ALLOWED_TO_CANCEL: Invalid permissions\n - ORDER_IS_FULLY_FILLED: Order is fully filled\n - ORDER_IS_BEING_REPLACED: Order is being replaced"
    },
    "coinbase.public_api.authed.retail_brokerage_api.CancelOrderResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true,
          "description": "Whether the cancel request was submitted successfully.",
          "required": [
            "success"
          ]
        },
        "failure_reason": {
          "description": "The reason the cancel request did not get submitted",
          "required": [
            "failure_reason"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.CancelOrderFailureReason"
            }
          ]
        },
        "order_id": {
          "type": "string",
          "example": "0000-00000",
          "description": "The ID of the order.",
          "required": [
            "order_id"
          ]
        }
      },
      "required": [
        "success",
        "failure_reason",
        "order_id"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.CancelOrdersRequest": {
      "type": "object",
      "properties": {
        "order_ids": {
          "type": "array",
          "example": [
            "0000-00000",
            "1111-11111"
          ],
          "items": {
            "type": "string"
          },
          "description": "The order IDs that cancel requests should be initiated for.",
          "required": [
            "order_ids"
          ]
        }
      },
      "required": [
        "order_ids"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.CancelOrdersResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.CancelOrderResponse"
          },
          "description": "The result of initiated cancel requests"
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.Candle": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string",
          "example": "1639508050",
          "description": "The UNIX timestamp indicating the start of the time interval."
        },
        "low": {
          "type": "string",
          "example": "140.21",
          "description": "Lowest price during the bucket interval."
        },
        "high": {
          "type": "string",
          "example": "140.21",
          "description": "Highest price during the bucket interval."
        },
        "open": {
          "type": "string",
          "example": "140.21",
          "description": "Opening price (first trade) in the bucket interval."
        },
        "close": {
          "type": "string",
          "example": "140.21",
          "description": "Closing price (last trade) in the bucket interval."
        },
        "volume": {
          "type": "string",
          "example": "56437345",
          "description": "Volume of trading activity during the bucket interval."
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.Candles": {
      "type": "object",
      "properties": {
        "candles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.Candle"
          }
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.ClosePositionRequest": {
      "type": "object",
      "properties": {
        "client_order_id": {
          "type": "string",
          "example": "0000-00000-000000",
          "description": "The unique ID provided for the order (used for identification purposes).",
          "required": [
            "client_order_id"
          ]
        },
        "product_id": {
          "type": "string",
          "example": "BIT-28JUL23-CDE",
          "description": "The trading pair (e.g. 'BIT-28JUL23-CDE').",
          "required": [
            "product_id"
          ]
        },
        "size": {
          "type": "string",
          "example": 3,
          "description": "The amount of contracts that should be closed."
        }
      },
      "required": [
        "client_order_id",
        "product_id"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.ClosePositionResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true,
          "description": "Whether the order was created.",
          "required": [
            "success"
          ]
        },
        "success_response": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.NewOrderSuccessResponse"
            }
          ]
        },
        "error_response": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.NewOrderErrorResponse"
            }
          ]
        },
        "order_configuration": {
          "description": "The configuration of the order (e.g. the order type, size, etc).",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.OrderConfiguration"
            }
          ]
        }
      },
      "required": [
        "success"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.ContractExpiryType": {
      "type": "string",
      "enum": [
        "UNKNOWN_CONTRACT_EXPIRY_TYPE",
        "EXPIRING",
        "PERPETUAL"
      ],
      "default": "UNKNOWN_CONTRACT_EXPIRY_TYPE"
    },
    "coinbase.public_api.authed.retail_brokerage_api.CreatePortfolioRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the portfolio.",
          "required": true
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.CreatePortfolioResponse": {
      "type": "object",
      "properties": {
        "portfolio": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.Portfolio"
            }
          ]
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.DeletePortfolioResponse": {
      "type": "object"
    },
    "coinbase.public_api.authed.retail_brokerage_api.Edit": {
      "type": "object",
      "properties": {
        "price": {
          "type": "string",
          "example": "19000.00",
          "description": "The update price of the order."
        },
        "size": {
          "type": "string",
          "example": "0.001",
          "description": "The updated size of the order."
        },
        "replace_accept_timestamp": {
          "type": "string",
          "format": "RFC3339 Timestamp"
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.EditOrderError": {
      "type": "object",
      "properties": {
        "edit_failure_reason": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.EditOrderFailureReason"
            }
          ]
        },
        "preview_failure_reason": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.PreviewFailureReason"
            }
          ]
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.EditOrderErrorResponse": {
      "type": "object",
      "properties": {
        "error_details": {
          "type": "string",
          "example": "Market orders cannot be placed with empty order sizes",
          "description": "Descriptive error message explaining why the order was not created"
        },
        "edit_order_failure_reason": {
          "description": "The reason the order failed to be created",
          "required": [
            "edit_order_failure_reason"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.EditOrderFailureReason"
            }
          ]
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.EditOrderFailureReason": {
      "type": "string",
      "enum": [
        "UNKNOWN_EDIT_ORDER_FAILURE_REASON",
        "COMMANDER_REJECTED_EDIT_ORDER",
        "CANNOT_EDIT_TO_BELOW_FILLED_SIZE",
        "ORDER_NOT_FOUND",
        "CALLER_ID_MISMATCH",
        "ONLY_LIMIT_ORDER_EDITS_SUPPORTED",
        "INVALID_EDITED_SIZE",
        "INVALID_EDITED_PRICE",
        "INVALID_ORIGINAL_SIZE",
        "INVALID_ORIGINAL_PRICE",
        "EDIT_REQUEST_EQUAL_TO_ORIGINAL_REQUEST",
        "ONLY_OPEN_ORDERS_CAN_BE_EDITED",
        "SIZE_IN_QUOTE_EDITS_NOT_ALLOWED",
        "ORDER_IS_ALREADY_BEING_REPLACED"
      ],
      "default": "UNKNOWN_EDIT_ORDER_FAILURE_REASON",
      "title": ""
    },
    "coinbase.public_api.authed.retail_brokerage_api.EditOrderRequest": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string",
          "description": "The ID of the order.",
          "required": [
            "order_id"
          ]
        },
        "price": {
          "type": "string",
          "example": "19000.00",
          "description": "The update price of the order.",
          "required": [
            "price"
          ]
        },
        "size": {
          "type": "string",
          "example": "0.001",
          "description": "The updated size of the order.",
          "required": [
            "size"
          ]
        }
      },
      "required": [
        "order_id",
        "price",
        "size"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.EditOrderResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true,
          "description": "Whether the order edit request was placed.",
          "required": [
            "success"
          ]
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.EditOrderError"
          }
        }
      },
      "required": [
        "success"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.EditOrderSuccessResponse": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string",
          "example": "11111-00000-000000",
          "description": "The ID of the order.",
          "required": [
            "order_id"
          ]
        }
      },
      "required": [
        "order_id"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.EditPortfolioRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the portfolio.",
          "required": true
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.EditPortfolioResponse": {
      "type": "object",
      "properties": {
        "portfolio": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.Portfolio"
            }
          ]
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.ExpiringContractStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN_EXPIRING_CONTRACT_STATUS",
        "STATUS_UNEXPIRED",
        "STATUS_EXPIRED",
        "STATUS_ALL"
      ],
      "default": "UNKNOWN_EXPIRING_CONTRACT_STATUS"
    },
    "coinbase.public_api.authed.retail_brokerage_api.FcmScheduledMaintenance": {
      "type": "object",
      "properties": {
        "start_time": {
          "type": "string",
          "format": "RFC3339 Timestamp"
        },
        "end_time": {
          "type": "string",
          "format": "RFC3339 Timestamp"
        }
      },
      "description": "Fcm specific scheduled maintenance details."
    },
    "coinbase.public_api.authed.retail_brokerage_api.FcmTradingSessionClosedReason": {
      "type": "string",
      "enum": [
        "FCM_TRADING_SESSION_CLOSED_REASON_UNDEFINED",
        "FCM_TRADING_SESSION_CLOSED_REASON_REGULAR_MARKET_CLOSE",
        "FCM_TRADING_SESSION_CLOSED_REASON_EXCHANGE_MAINTENANCE",
        "FCM_TRADING_SESSION_CLOSED_REASON_VENDOR_MAINTENANCE"
      ],
      "default": "FCM_TRADING_SESSION_CLOSED_REASON_UNDEFINED",
      "description": "This helps distinguish between regular market close and downtimes due to maintenance."
    },
    "coinbase.public_api.authed.retail_brokerage_api.FcmTradingSessionDetails": {
      "type": "object",
      "properties": {
        "is_session_open": {
          "type": "boolean"
        },
        "open_time": {
          "type": "string",
          "format": "RFC3339 Timestamp"
        },
        "close_time": {
          "type": "string",
          "format": "RFC3339 Timestamp"
        },
        "session_state": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.FcmTradingSessionState"
            }
          ]
        },
        "after_hours_order_entry_disabled": {
          "type": "boolean"
        },
        "closed_reason": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.FcmTradingSessionClosedReason"
            }
          ]
        },
        "maintenance": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.FcmScheduledMaintenance"
            }
          ]
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.FcmTradingSessionState": {
      "type": "string",
      "enum": [
        "FCM_TRADING_SESSION_STATE_UNDEFINED",
        "FCM_TRADING_SESSION_STATE_PRE_OPEN",
        "FCM_TRADING_SESSION_STATE_PRE_OPEN_NO_CANCEL",
        "FCM_TRADING_SESSION_STATE_OPEN",
        "FCM_TRADING_SESSION_STATE_CLOSE"
      ],
      "default": "FCM_TRADING_SESSION_STATE_UNDEFINED"
    },
    "coinbase.public_api.authed.retail_brokerage_api.FeeTier": {
      "type": "object",
      "properties": {
        "pricing_tier": {
          "type": "string",
          "example": "<$10k",
          "description": "Pricing tier for user, determined by notional (USD) volume."
        },
        "usd_from": {
          "type": "string",
          "example": "0",
          "description": "Lower bound (inclusive) of pricing tier in notional volume."
        },
        "usd_to": {
          "type": "string",
          "example": "10,000",
          "description": "Upper bound (exclusive) of pricing tier in notional volume."
        },
        "taker_fee_rate": {
          "type": "string",
          "example": "0.0010",
          "description": "Taker fee rate, applied if the order takes liquidity."
        },
        "maker_fee_rate": {
          "type": "string",
          "example": "0.0020",
          "description": "Maker fee rate, applied if the order creates liquidity."
        },
        "aop_from": {
          "type": "string",
          "example": "0",
          "description": "Lower bound (inclusive) of pricing tier in usd of total assets on platform."
        },
        "aop_to": {
          "type": "string",
          "example": "10000",
          "description": "Upper bound (exclusive) of pricing tier in usd of total assets on platform."
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.Fill": {
      "type": "object",
      "properties": {
        "entry_id": {
          "type": "string",
          "example": "22222-2222222-22222222",
          "description": "Unique identifier for the fill."
        },
        "trade_id": {
          "type": "string",
          "example": "1111-11111-111111",
          "description": "ID of the fill -- unique for all `FILL` trade_types but not unique for adjusted fills."
        },
        "order_id": {
          "type": "string",
          "example": "0000-000000-000000",
          "description": "The ID of the order."
        },
        "trade_time": {
          "type": "string",
          "format": "RFC3339 Timestamp",
          "example": "2021-05-31T09:59:59Z",
          "description": "Time at which this fill was completed."
        },
        "trade_type": {
          "type": "string",
          "example": "FILL",
          "description": "String denoting what type of fill this is. Regular fills have the value `FILL`. Adjusted fills have possible values `REVERSAL`, `CORRECTION`, `SYNTHETIC`."
        },
        "price": {
          "type": "string",
          "example": "10000.00",
          "description": "Price the fill was posted at."
        },
        "size": {
          "type": "string",
          "example": "0.001",
          "description": "Amount of order that was transacted at this fill."
        },
        "commission": {
          "type": "string",
          "example": "1.25",
          "description": "Fee amount for fill."
        },
        "product_id": {
          "type": "string",
          "example": "BTC-USD",
          "description": "The trading pair (e.g. 'BTC-USD')."
        },
        "sequence_timestamp": {
          "type": "string",
          "format": "RFC3339 Timestamp",
          "example": "2021-05-31T09:58:59Z",
          "description": "Time at which this fill was posted."
        },
        "liquidity_indicator": {
          "description": "Whether this fill gives or takes liquidity.",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.LiquidityIndicator"
            }
          ]
        },
        "size_in_quote": {
          "type": "boolean",
          "example": false,
          "description": "Whether the order was placed with quote currency."
        },
        "user_id": {
          "type": "string",
          "example": "3333-333333-3333333",
          "description": "User that placed the order the fill belongs to."
        },
        "side": {
          "description": "Side of order that this fill belongs to.",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.OrderSide"
            }
          ]
        },
        "retail_portfolio_id": {
          "type": "string",
          "example": "4444-444444-4444444",
          "description": "Portfolio that the order fill belongs to."
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.FutureProductDetails": {
      "type": "object",
      "properties": {
        "venue": {
          "type": "string"
        },
        "contract_code": {
          "type": "string"
        },
        "contract_expiry": {
          "type": "string",
          "format": "RFC3339 Timestamp"
        },
        "contract_size": {
          "type": "string"
        },
        "contract_root_unit": {
          "type": "string"
        },
        "group_description": {
          "type": "string"
        },
        "contract_expiry_timezone": {
          "type": "string"
        },
        "group_short_description": {
          "type": "string"
        },
        "risk_managed_by": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.RiskManagementType"
            }
          ]
        },
        "contract_expiry_type": {
          "description": "The contract expiry type (e.g. 'EXPIRING').",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.ContractExpiryType"
            }
          ]
        },
        "perpetual_details": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.PerpetualProductDetails"
            }
          ]
        },
        "contract_display_name": {
          "type": "string"
        },
        "time_to_expiry_ms": {
          "type": "string",
          "format": "int64"
        },
        "non_crypto": {
          "type": "boolean"
        },
        "contract_expiry_name": {
          "type": "string"
        },
        "twenty_four_by_seven": {
          "type": "boolean"
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.GetAccountResponse": {
      "type": "object",
      "properties": {
        "account": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.Account"
            }
          ]
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.GetAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.Account"
          }
        },
        "has_next": {
          "type": "boolean",
          "example": true,
          "description": "Whether there are additional pages for this query.",
          "required": [
            "has_next"
          ]
        },
        "cursor": {
          "type": "string",
          "example": "789100",
          "description": "For paginated responses, returns all responses that come after this value."
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "Number of accounts returned"
        }
      },
      "required": [
        "has_next"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.GetBestBidAskResponse": {
      "type": "object",
      "properties": {
        "pricebooks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.PriceBook"
          },
          "required": [
            "pricebooks"
          ]
        }
      },
      "required": [
        "pricebooks"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.GetCandlesResponse": {
      "type": "object",
      "properties": {
        "body": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.Candles"
            }
          ]
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.GetFillsRequest.FillsSortBy": {
      "type": "string",
      "enum": [
        "UNKNOWN_SORT_BY",
        "PRICE",
        "TRADE_TIME"
      ],
      "default": "UNKNOWN_SORT_BY"
    },
    "coinbase.public_api.authed.retail_brokerage_api.GetFillsResponse": {
      "type": "object",
      "properties": {
        "fills": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.Fill"
          },
          "description": "All fills matching the filters."
        },
        "cursor": {
          "type": "string",
          "example": "789100",
          "description": "For paginated responses, returns all responses that come after this value."
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.GetHistoricalOrderResponse": {
      "type": "object",
      "properties": {
        "order": {
          "description": "The retrieved order.",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.Order"
            }
          ]
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.GetHistoricalOrdersRequest.HistoricalOrdersSortBy": {
      "type": "string",
      "enum": [
        "UNKNOWN_SORT_BY",
        "LIMIT_PRICE",
        "LAST_FILL_TIME"
      ],
      "default": "UNKNOWN_SORT_BY"
    },
    "coinbase.public_api.authed.retail_brokerage_api.GetHistoricalOrdersResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.Order"
          },
          "description": "A list of orders matching the query.",
          "required": [
            "orders"
          ]
        },
        "sequence": {
          "type": "string",
          "format": "int64",
          "description": "**(Deprecated)** The sequence of the db at which this state was read."
        },
        "has_next": {
          "type": "boolean",
          "example": true,
          "description": "Whether there are additional pages for this query.",
          "required": [
            "has_next"
          ]
        },
        "cursor": {
          "type": "string",
          "example": "789100",
          "description": "For paginated responses, returns all responses that come after this value."
        }
      },
      "required": [
        "orders",
        "has_next"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.GetMarketTradesResponse": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.HistoricalMarketTrade"
          }
        },
        "best_bid": {
          "type": "string",
          "example": "291.13",
          "description": "The best bid for the `product_id`, in quote currency."
        },
        "best_ask": {
          "type": "string",
          "example": "292.40",
          "description": "The best ask for the `product_id`, in quote currency."
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.GetPortfolioBreakdownResponse": {
      "type": "object",
      "properties": {
        "breakdown": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.PortfolioBreakdown"
            }
          ]
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.GetPortfoliosResponse": {
      "type": "object",
      "properties": {
        "portfolios": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.portfolio_service.Portfolio"
          }
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.GetProductBookResponse": {
      "type": "object",
      "properties": {
        "pricebook": {
          "required": [
            "pricebook"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.PriceBook"
            }
          ]
        },
        "last": {
          "type": "string"
        },
        "mid_market": {
          "type": "string"
        },
        "spread_bps": {
          "type": "string"
        },
        "spread_absolute": {
          "type": "string"
        }
      },
      "required": [
        "pricebook"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.GetProductResponse": {
      "type": "object",
      "properties": {
        "body": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.Product"
            }
          ]
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.GetProductsResponse": {
      "type": "object",
      "properties": {
        "body": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.Products"
            }
          ]
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.GetTransactionSummaryResponse": {
      "type": "object",
      "properties": {
        "total_volume": {
          "type": "number",
          "format": "double",
          "example": 1000,
          "description": "Total volume across assets, denoted in USD.",
          "required": [
            "total_volume"
          ]
        },
        "total_fees": {
          "type": "number",
          "format": "double",
          "example": 25,
          "description": "Total fees across assets, denoted in USD.",
          "required": [
            "total_fees"
          ]
        },
        "fee_tier": {
          "description": "Description of maker and taker rates across all applicable fee tiers.",
          "required": [
            "fee_tier"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.FeeTier"
            }
          ]
        },
        "margin_rate": {
          "example": 0.5,
          "description": "Margin rate, only applicable to product_type `FUTURE`.",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.brokerage.types.Decimal"
            }
          ]
        },
        "goods_and_services_tax": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.GoodsAndServicesTax"
            }
          ]
        },
        "advanced_trade_only_volume": {
          "type": "number",
          "format": "double",
          "example": 1000,
          "description": "Advanced Trade volume (non-inclusive of Pro) across assets, denoted in USD."
        },
        "advanced_trade_only_fees": {
          "type": "number",
          "format": "double",
          "example": 25,
          "description": "Advanced Trade fees (non-inclusive of Pro) across assets, denoted in USD."
        },
        "coinbase_pro_volume": {
          "type": "number",
          "format": "double",
          "example": 1000,
          "description": "Coinbase Pro volume across assets, denoted in USD."
        },
        "coinbase_pro_fees": {
          "type": "number",
          "format": "double",
          "example": 25,
          "description": "Coinbase Pro fees across assets, denoted in USD."
        },
        "total_balance": {
          "type": "string",
          "example": "1000",
          "description": "Total balance across assets and products, which is comprised of the sum of spot, intx, and fcm, and denoted in USD."
        }
      },
      "required": [
        "total_volume",
        "total_fees",
        "fee_tier"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.GoodsAndServicesTax": {
      "type": "object",
      "properties": {
        "rate": {
          "type": "string"
        },
        "type": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.GstType"
            }
          ]
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.Granularity": {
      "type": "string",
      "enum": [
        "UNKNOWN_GRANULARITY",
        "ONE_MINUTE",
        "FIVE_MINUTE",
        "FIFTEEN_MINUTE",
        "THIRTY_MINUTE",
        "ONE_HOUR",
        "TWO_HOUR",
        "SIX_HOUR",
        "ONE_DAY"
      ],
      "default": "UNKNOWN_GRANULARITY"
    },
    "coinbase.public_api.authed.retail_brokerage_api.GstType": {
      "type": "string",
      "enum": [
        "INCLUSIVE",
        "EXCLUSIVE"
      ],
      "default": "INCLUSIVE",
      "title": "- INCLUSIVE: inclusive means the `feeTier`` is inclusive of the GST (e.g SG)\n - EXCLUSIVE: exclusive means the `feeTier`` is exclusive of the GST (e.g AU)"
    },
    "coinbase.public_api.authed.retail_brokerage_api.HistoricalMarketTrade": {
      "type": "object",
      "properties": {
        "trade_id": {
          "type": "string",
          "example": "34b080bf-fcfd-445a-832b-46b5ddc65601",
          "description": "The ID of the trade that was placed."
        },
        "product_id": {
          "type": "string",
          "example": "BTC-USD",
          "description": "The trading pair (e.g. 'BTC-USD')."
        },
        "price": {
          "type": "string",
          "example": "140.91",
          "description": "The price of the trade, in quote currency."
        },
        "size": {
          "type": "string",
          "example": "4",
          "description": "The size of the trade, in base currency."
        },
        "time": {
          "type": "string",
          "format": "RFC3339 Timestamp",
          "example": "2021-05-31T09:59:59Z",
          "description": "The time of the trade."
        },
        "side": {
          "description": "The side of the trade.",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.OrderSide"
            }
          ]
        },
        "exchange": {
          "type": "string",
          "description": "The exchange where the trade was placed."
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.L2Level": {
      "type": "object",
      "properties": {
        "price": {
          "type": "string"
        },
        "size": {
          "type": "string"
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.LimitLimitFok": {
      "type": "object",
      "properties": {
        "base_size": {
          "type": "string",
          "example": "0.001",
          "description": "The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset."
        },
        "limit_price": {
          "type": "string",
          "example": "10000.00",
          "description": "The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price."
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.LimitLimitGtc": {
      "type": "object",
      "properties": {
        "base_size": {
          "type": "string",
          "example": "0.001",
          "description": "The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset."
        },
        "limit_price": {
          "type": "string",
          "example": "10000.00",
          "description": "The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price."
        },
        "post_only": {
          "type": "boolean",
          "example": false,
          "description": "Enable or disable Post-only Mode. When enabled, only Maker Orders will be posted to the Order Book. Orders that will be posted as a Taker Order will be rejected."
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.LimitLimitGtd": {
      "type": "object",
      "properties": {
        "base_size": {
          "type": "string",
          "example": "0.001",
          "description": "The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset."
        },
        "limit_price": {
          "type": "string",
          "example": "10000.00",
          "description": "The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price."
        },
        "end_time": {
          "type": "string",
          "format": "RFC3339 Timestamp",
          "example": "2021-05-31T09:59:59Z",
          "description": "The time at which the order will be cancelled if it is not Filled."
        },
        "post_only": {
          "type": "boolean",
          "example": false,
          "description": "Enable or disable Post-only Mode. When enabled, only Maker Orders will be posted to the Order Book. Orders that will be posted as a Taker Order will be rejected."
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.LiquidationMarketGtc": {
      "type": "object",
      "properties": {
        "base_size": {
          "type": "string",
          "example": 0.001,
          "description": "The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset."
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.LiquidationMarketGtd": {
      "type": "object",
      "properties": {
        "base_size": {
          "type": "string",
          "example": 0.001,
          "description": "The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset."
        },
        "end_time": {
          "type": "string",
          "format": "RFC3339 Timestamp",
          "example": "2021-05-31T09:59:59Z",
          "description": "The time at which the order will be cancelled if it is not Filled."
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.LiquidityIndicator": {
      "type": "string",
      "enum": [
        "UNKNOWN_LIQUIDITY_INDICATOR",
        "MAKER",
        "TAKER"
      ],
      "default": "UNKNOWN_LIQUIDITY_INDICATOR"
    },
    "coinbase.public_api.authed.retail_brokerage_api.MarginType": {
      "type": "string",
      "enum": [
        "CROSS",
        "ISOLATED"
      ],
      "default": "",
      "description": "- CROSS: Cross margin applies margin to the position of the entire portfolio\n - ISOLATED: Isolated margin applies margin to a single position",
      "title": "MarginType reflects the margin type of an order, used for Intx Perps trades"
    },
    "coinbase.public_api.authed.retail_brokerage_api.MarketMarketIoc": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string",
          "example": "10.00",
          "description": "The amount of the second Asset in the Trading Pair. For example, on the BTC/USD Order Book, USD is the Quote Asset."
        },
        "base_size": {
          "type": "string",
          "example": "0.001",
          "description": "The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset."
        }
      },
      "title": "Order entry configurations"
    },
    "coinbase.public_api.authed.retail_brokerage_api.MovePortfolioFundsRequest": {
      "type": "object",
      "properties": {
        "funds": {
          "description": "The amount to be moved to the specified portfolio.",
          "required": true,
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.Amount"
            }
          ]
        },
        "source_portfolio_uuid": {
          "type": "string",
          "example": "8bfc20d7-f7c6-4422-bf07-8243ca4169fe",
          "description": "The UUID of the portfolio to send funds from.",
          "required": true
        },
        "target_portfolio_uuid": {
          "type": "string",
          "example": "8bfc20d7-f7c6-4422-bf07-8243ca4169fe",
          "description": "The UUID of the portfolio to send funds to.",
          "required": true
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.MovePortfolioFundsResponse": {
      "type": "object",
      "properties": {
        "source_portfolio_uuid": {
          "type": "string",
          "example": "8bfc20d7-f7c6-4422-bf07-8243ca4169fe",
          "description": "The UUID of the portfolio to send funds from."
        },
        "target_portfolio_uuid": {
          "type": "string",
          "example": "8bfc20d7-f7c6-4422-bf07-8243ca4169fe",
          "description": "The UUID of the portfolio to send funds to."
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.NewOrderErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "description": "**(Deprecated)**  The reason the order failed to be created",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.NewOrderFailureReason"
            }
          ]
        },
        "message": {
          "type": "string",
          "example": "The order configuration was invalid",
          "description": "Generic error message explaining why the order was not created"
        },
        "error_details": {
          "type": "string",
          "example": "Market orders cannot be placed with empty order sizes",
          "description": "Descriptive error message explaining why the order was not created"
        },
        "preview_failure_reason": {
          "description": "**(Deprecated)**  The reason the order failed to be created",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.PreviewFailureReason"
            }
          ]
        },
        "new_order_failure_reason": {
          "description": "The reason the order failed to be created",
          "required": [
            "new_order_failure_reason"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.NewOrderFailureReason"
            }
          ]
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.NewOrderFailureReason": {
      "type": "string",
      "enum": [
        "UNKNOWN_FAILURE_REASON",
        "UNSUPPORTED_ORDER_CONFIGURATION",
        "INVALID_SIDE",
        "INVALID_PRODUCT_ID",
        "INVALID_SIZE_PRECISION",
        "INVALID_PRICE_PRECISION",
        "INSUFFICIENT_FUND",
        "INVALID_LEDGER_BALANCE",
        "ORDER_ENTRY_DISABLED",
        "INELIGIBLE_PAIR",
        "INVALID_LIMIT_PRICE_POST_ONLY",
        "INVALID_LIMIT_PRICE",
        "INVALID_NO_LIQUIDITY",
        "INVALID_REQUEST",
        "COMMANDER_REJECTED_NEW_ORDER",
        "INSUFFICIENT_FUNDS",
        "IN_LIQUIDATION",
        "INVALID_MARGIN_TYPE",
        "INVALID_LEVERAGE",
        "UNTRADABLE_PRODUCT",
        "INVALID_FCM_TRADING_SESSION",
        "GEOFENCING_RESTRICTION",
        "QUOTE_SIZE_NOT_ALLOWED_FOR_BRACKET",
        "INVALID_BRACKET_PRICES",
        "MISSING_MARKET_TRADE_DATA",
        "INVALID_BRACKET_LIMIT_PRICE",
        "INVALID_BRACKET_STOP_TRIGGER_PRICE",
        "BRACKET_LIMIT_PRICE_OUT_OF_BOUNDS",
        "STOP_TRIGGER_PRICE_OUT_OF_BOUNDS",
        "BRACKET_ORDER_NOT_SUPPORTED",
        "FOK_DISABLED",
        "FOK_ONLY_ALLOWED_ON_LIMIT_ORDERS",
        "POST_ONLY_NOT_ALLOWED_WITH_FOK",
        "UBO_HIGH_LEVERAGE_QUANTITY_BREACHED",
        "END_TIME_TOO_FAR_IN_FUTURE",
        "LIMIT_PRICE_TOO_FAR_FROM_MARKET",
        "OPEN_BRACKET_ORDERS",
        "FUTURES_AFTER_HOUR_INVALID_ORDER_TYPE",
        "FUTURES_AFTER_HOUR_INVALID_TIME_IN_FORCE",
        "INVALID_ATTACHED_TAKE_PROFIT_PRICE",
        "INVALID_ATTACHED_STOP_LOSS_PRICE",
        "INVALID_ATTACHED_TAKE_PROFIT_PRICE_PRECISION",
        "INVALID_ATTACHED_STOP_LOSS_PRICE_PRECISION",
        "INVALID_ATTACHED_TAKE_PROFIT_PRICE_OUT_OF_BOUNDS",
        "INVALID_ATTACHED_STOP_LOSS_PRICE_OUT_OF_BOUNDS"
      ],
      "default": "UNKNOWN_FAILURE_REASON"
    },
    "coinbase.public_api.authed.retail_brokerage_api.NewOrderRequest": {
      "type": "object",
      "properties": {
        "client_order_id": {
          "type": "string",
          "example": "0000-00000-000000",
          "description": "A unique ID provided for the order (used for identification purposes). If the ID provided is not unique, the order will not be created and the order corresponding with that ID will be returned instead.",
          "required": [
            "client_order_id"
          ]
        },
        "product_id": {
          "type": "string",
          "example": "BTC-USD",
          "description": "The trading pair (e.g. 'BTC-USD').",
          "required": [
            "product_id"
          ]
        },
        "side": {
          "description": "The side of the market that the order is on (e.g. 'BUY', 'SELL').",
          "required": [
            "side"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.OrderSide"
            }
          ]
        },
        "order_configuration": {
          "description": "The configuration of the order (e.g. the order type, size, etc).",
          "required": [
            "order_configuration"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.OrderConfiguration"
            }
          ]
        },
        "leverage": {
          "type": "string",
          "example": "2.0",
          "description": "The amount of leverage for the order (default is 1.0)."
        },
        "margin_type": {
          "description": "Margin Type for this order (default is CROSS).",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.MarginType"
            }
          ]
        },
        "retail_portfolio_id": {
          "type": "string",
          "example": "11111111-1111-1111-1111-111111111111",
          "description": "**(Deprecated)** The ID of the portfolio to associate the order with. Only applicable for legacy keys. CDP keys will default to the key's permissioned portfolio."
        },
        "preview_id": {
          "type": "string",
          "example": "b40bbff9-17ce-4726-8b64-9de7ae57ad26",
          "description": "Preview ID for this order, to associate this order with a preview request"
        }
      },
      "required": [
        "client_order_id",
        "product_id",
        "side",
        "order_configuration"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.NewOrderResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true,
          "description": "Whether the order was created.",
          "required": [
            "success"
          ]
        },
        "success_response": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.NewOrderSuccessResponse"
            }
          ]
        },
        "error_response": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.NewOrderErrorResponse"
            }
          ]
        },
        "order_configuration": {
          "description": "The configuration of the order (e.g. the order type, size, etc).",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.OrderConfiguration"
            }
          ]
        }
      },
      "required": [
        "success"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.NewOrderSuccessResponse": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string",
          "example": "11111-00000-000000",
          "description": "The ID of the order.",
          "required": [
            "order_id"
          ]
        },
        "product_id": {
          "type": "string",
          "example": "BTC-USD",
          "description": "The trading pair (e.g. 'BTC-USD')."
        },
        "side": {
          "description": "The side of the market that the order is on (e.g. 'BUY', 'SELL').",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.OrderSide"
            }
          ]
        },
        "client_order_id": {
          "type": "string",
          "example": "0000-00000-000000",
          "description": "The unique ID provided for the order (used for identification purposes)."
        }
      },
      "required": [
        "order_id"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.Order": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "string",
          "example": "0000-000000-000000",
          "description": "The ID of the order.",
          "required": [
            "order_id"
          ]
        },
        "product_id": {
          "type": "string",
          "example": "BTC-USD",
          "description": "The trading pair (e.g. 'BTC-USD').",
          "required": [
            "product_id"
          ]
        },
        "user_id": {
          "type": "string",
          "example": "2222-000000-000000",
          "description": "The id of the User owning this Order",
          "required": [
            "user_id"
          ]
        },
        "order_configuration": {
          "description": "The configuration of the order (e.g. the order type, size, etc).",
          "required": [
            "order_configuration"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.OrderConfiguration"
            }
          ]
        },
        "side": {
          "description": "The side of the market that the order is on (e.g. 'BUY', 'SELL').",
          "required": [
            "side"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.OrderSide"
            }
          ]
        },
        "client_order_id": {
          "type": "string",
          "example": "11111-000000-000000",
          "description": "The unique ID provided for the order (used for identification purposes).",
          "required": [
            "client_order_id"
          ]
        },
        "status": {
          "description": "The current state of the order",
          "required": [
            "status"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.OrderExecutionStatus"
            }
          ]
        },
        "time_in_force": {
          "description": "The client specified window for which the order can remain active",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.TimeInForceType"
            }
          ]
        },
        "created_time": {
          "type": "string",
          "format": "RFC3339 Timestamp",
          "example": "2021-05-31T09:59:59Z",
          "description": "Timestamp for when the order was created",
          "required": [
            "created_time"
          ]
        },
        "completion_percentage": {
          "type": "string",
          "example": "50",
          "description": "The percent of total order amount that has been filled",
          "required": [
            "completion_percentage"
          ]
        },
        "filled_size": {
          "type": "string",
          "example": "0.001",
          "description": "The portion (in base currency) of total order amount that has been filled"
        },
        "average_filled_price": {
          "type": "string",
          "example": "50",
          "description": "The average of all prices of fills for this order",
          "required": [
            "average_filled_price"
          ]
        },
        "fee": {
          "type": "string",
          "description": "**(Deprecated)**  Commission amount"
        },
        "number_of_fills": {
          "type": "string",
          "example": "2",
          "description": "Number of fills that have been posted for this order",
          "required": [
            "number_of_fills"
          ]
        },
        "filled_value": {
          "type": "string",
          "example": "10000",
          "description": "The portion (in quote current) of total order amount that has been filled"
        },
        "pending_cancel": {
          "type": "boolean",
          "example": true,
          "description": "Whether a cancel request has been initiated for the order, and not yet completed",
          "required": [
            "pending_cancel"
          ]
        },
        "size_in_quote": {
          "type": "boolean",
          "example": false,
          "description": "Whether the order was placed with quote currency",
          "required": [
            "size_in_quote"
          ]
        },
        "total_fees": {
          "type": "string",
          "example": "5.00",
          "description": "The total fees for the order",
          "required": [
            "total_fees"
          ]
        },
        "size_inclusive_of_fees": {
          "type": "boolean",
          "example": false,
          "description": "Whether the order size includes fees",
          "required": [
            "size_inclusive_of_fees"
          ]
        },
        "total_value_after_fees": {
          "type": "string",
          "description": "derived field: filled_value + total_fees for buy orders and filled_value - total_fees for sell orders.",
          "required": [
            "total_value_after_fees"
          ]
        },
        "trigger_status": {
          "description": "The trigger status of the order, with respect to stop price.",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.StopTriggerStatus"
            }
          ]
        },
        "order_type": {
          "description": "Type of the order",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.OrderType"
            }
          ]
        },
        "reject_reason": {
          "description": "Reason the order was rejected.",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.RejectReason"
            }
          ]
        },
        "settled": {
          "type": "boolean",
          "description": "True if the order is fully filled, false otherwise."
        },
        "product_type": {
          "description": "The type of order, i.e. Spot or Future",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.ProductType"
            }
          ]
        },
        "reject_message": {
          "type": "string",
          "description": "Message stating why the order was rejected."
        },
        "cancel_message": {
          "type": "string",
          "description": "Message stating why the order was canceled."
        },
        "order_placement_source": {
          "description": "Message stating which source an order was placed from.",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.OrderPlacementSource"
            }
          ]
        },
        "outstanding_hold_amount": {
          "type": "string",
          "description": "The remaining hold amount (holdAmount - holdAmountReleased). [value is 0 if holdReleased is true]"
        },
        "is_liquidation": {
          "type": "boolean",
          "description": "True if order is of liquidation type."
        },
        "last_fill_time": {
          "type": "string",
          "format": "RFC3339 Timestamp",
          "description": "Time of the most recent fill for this order"
        },
        "edit_history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.Edit"
          },
          "description": "An array of the latest 5 edits per order"
        },
        "leverage": {
          "type": "string",
          "description": "The amount of leverage for the order (default is 1.0)."
        },
        "margin_type": {
          "description": "Margin Type for this order (default is CROSS).",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.MarginType"
            }
          ]
        },
        "retail_portfolio_id": {
          "type": "string",
          "example": "b87a2d3f-8a1e-49b3-a4ea-402d8c389aca",
          "description": "The ID of the portfolio this order is associated with."
        }
      },
      "required": [
        "order_id",
        "product_id",
        "side",
        "created_time",
        "status",
        "user_id",
        "order_configuration",
        "client_order_id",
        "completion_percentage",
        "average_filled_price",
        "number_of_fills",
        "pending_cancel",
        "size_in_quote",
        "total_fees",
        "size_inclusive_of_fees",
        "total_value_after_fees"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.OrderConfiguration": {
      "type": "object",
      "properties": {
        "market_market_ioc": {
          "description": "Buy or sell a specified quantity of an Asset at the current best available market price. [Read more on Market Orders](https://help.coinbase.com/en/coinbase/trading-and-funding/advanced-trade/order-types#market-order) ",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.MarketMarketIoc"
            }
          ]
        },
        "sor_limit_ioc": {
          "description": "Buy or sell a specified quantity of an Asset at a specified price. The Order will only post to the Order Book if it will immediately Fill; any remaining quantity is canceled. [Read more on Limit Orders.](https://help.coinbase.com/en/coinbase/trading-and-funding/advanced-trade/order-types#limit-order)",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.SorLimitIoc"
            }
          ]
        },
        "limit_limit_gtc": {
          "description": "Buy or sell a specified quantity of an Asset at a specified price. If posted, the Order will remain on the Order Book until canceled. [Read more on Limit Orders.](https://help.coinbase.com/en/coinbase/trading-and-funding/advanced-trade/order-types#limit-order)",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.LimitLimitGtc"
            }
          ]
        },
        "limit_limit_gtd": {
          "description": "Buy or sell a specified quantity of an Asset at a specified price. If posted, the Order will remain on the Order Book until a certain time is reached or the Order is canceled. [Read more on Limit Orders.](https://help.coinbase.com/en/coinbase/trading-and-funding/advanced-trade/order-types#limit-order)",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.LimitLimitGtd"
            }
          ]
        },
        "limit_limit_fok": {
          "description": "Buy or sell a specified quantity of an Asset at a specified price. The Order will only post to the Order Book if it is to immediately and completely Fill. [Read more on Limit Orders.](https://help.coinbase.com/en/coinbase/trading-and-funding/advanced-trade/order-types#limit-order)",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.LimitLimitFok"
            }
          ]
        },
        "stop_limit_stop_limit_gtc": {
          "description": "Posts an Order to buy or sell a specified quantity of an Asset, but only if and when the last trade price on the Order Book equals or surpasses the Stop Price. If posted, the Order will remain on the Order Book until canceled. [Read more on Stop-Limit Orders.](https://help.coinbase.com/en/coinbase/trading-and-funding/advanced-trade/order-types#stop-limit-order)",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.StopLimitStopLimitGtc"
            }
          ]
        },
        "stop_limit_stop_limit_gtd": {
          "description": "Posts an Order to buy or sell a specified quantity of an Asset, but only if and when the last trade price on the Order Book equals or surpasses the Stop Price. If posted, the Order will remain on the Order Book until a certain time is reached or the Order.  [Read more on Stop-Limit Orders.](https://help.coinbase.com/en/coinbase/trading-and-funding/advanced-trade/order-types#stop-limit-order)",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.StopLimitStopLimitGtd"
            }
          ]
        },
        "trigger_bracket_gtc": {
          "description": "A Limit Order to buy or sell a specified quantity of an Asset at a specified price, with stop limit order parameters embedded in the order. If posted, the Order will remain on the Order Book until canceled. [Read more on Bracket Orders.](https://help.coinbase.com/en/coinbase/trading-and-funding/advanced-trade/order-types#bracket-order)",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.TriggerBracketGtc"
            }
          ]
        },
        "trigger_bracket_gtd": {
          "description": "A Limit Order to buy or sell a specified quantity of an Asset at a specified price, with stop limit order parameters embedded in the order. If posted, the Order will remain on the Order Book until a certain time is reached or the Order is canceled. [Read more on Bracket Orders.](https://help.coinbase.com/en/coinbase/trading-and-funding/advanced-trade/order-types#bracket-order)",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.TriggerBracketGtd"
            }
          ]
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.OrderExecutionStatus": {
      "type": "string",
      "enum": [
        "PENDING",
        "OPEN",
        "FILLED",
        "CANCELLED",
        "EXPIRED",
        "FAILED",
        "UNKNOWN_ORDER_STATUS",
        "QUEUED",
        "CANCEL_QUEUED"
      ],
      "default": "PENDING"
    },
    "coinbase.public_api.authed.retail_brokerage_api.OrderPlacementSource": {
      "type": "string",
      "enum": [
        "UNKNOWN_PLACEMENT_SOURCE",
        "RETAIL_SIMPLE",
        "RETAIL_ADVANCED"
      ],
      "default": "UNKNOWN_PLACEMENT_SOURCE",
      "title": "OrderPlacementSource reflects which source an order was placed from"
    },
    "coinbase.public_api.authed.retail_brokerage_api.OrderPreviewRequest": {
      "type": "object",
      "properties": {
        "product_id": {
          "type": "string",
          "description": "The trading pair (e.g. 'BTC-USD').",
          "required": [
            "product_id"
          ]
        },
        "side": {
          "description": "The side of the market that the order is on (e.g. 'BUY', 'SELL').",
          "required": [
            "side"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.OrderSide"
            }
          ]
        },
        "order_configuration": {
          "description": "The configuration of the order (e.g. the order type, size, etc).",
          "required": [
            "order_configuration"
          ],
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.OrderConfiguration"
            }
          ]
        },
        "leverage": {
          "type": "string",
          "example": "2.0",
          "description": "The amount of leverage for the order (default is 1.0)."
        },
        "margin_type": {
          "description": "Margin Type for this order (default is CROSS).",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.MarginType"
            }
          ]
        },
        "retail_portfolio_id": {
          "type": "string",
          "example": "11111111-1111-1111-1111-111111111111",
          "description": "**(Deprecated)** The ID of the portfolio to associate the order with. Only applicable for legacy keys. CDP keys will default to the key's permissioned portfolio."
        }
      },
      "title": "OrderPreview",
      "required": [
        "product_id",
        "side",
        "commission_rate",
        "order_configuration"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.OrderPreviewResponse": {
      "type": "object",
      "properties": {
        "order_total": {
          "type": "string",
          "required": [
            "order_total"
          ]
        },
        "commission_total": {
          "type": "string",
          "description": "Currency amount of the applied commission (so not the rate that was used on input)",
          "required": [
            "commission_total"
          ]
        },
        "errs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.PreviewFailureReason"
          },
          "description": "List of potential failure reasons were this order to be submitted",
          "required": [
            "errs"
          ]
        },
        "warning": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.PreviewWarningMsg"
          },
          "required": [
            "warning"
          ]
        },
        "quote_size": {
          "type": "string",
          "example": 10.0,
          "description": "The amount of the second Asset in the Trading Pair. For example, on the BTC/USD Order Book, USD is the Quote Asset.",
          "required": [
            "quote_size"
          ]
        },
        "base_size": {
          "type": "string",
          "example": 0.001,
          "description": "The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset.",
          "required": [
            "base_size"
          ]
        },
        "best_bid": {
          "type": "string",
          "required": [
            "best_bid"
          ]
        },
        "best_ask": {
          "type": "string",
          "required": [
            "best_ask"
          ]
        },
        "is_max": {
          "type": "boolean",
          "description": "Indicates whether tradable_balance should be set to the maximum amount.",
          "required": [
            "is_max"
          ]
        },
        "order_margin_total": {
          "type": "string"
        },
        "leverage": {
          "type": "string",
          "example": "2.0",
          "description": "The amount of leverage for the order (default is 1.0)."
        },
        "long_leverage": {
          "type": "string"
        },
        "short_leverage": {
          "type": "string"
        },
        "slippage": {
          "type": "string"
        },
        "preview_id": {
          "type": "string"
        },
        "current_liquidation_buffer": {
          "type": "string"
        },
        "projected_liquidation_buffer": {
          "type": "string"
        },
        "max_leverage": {
          "type": "string"
        }
      },
      "required": [
        "order_total",
        "commission_total",
        "errs",
        "warning",
        "quote_size",
        "base_size",
        "best_bid",
        "best_ask",
        "is_max"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.OrderSide": {
      "type": "string",
      "enum": [
        "BUY",
        "SELL"
      ],
      "default": ""
    },
    "coinbase.public_api.authed.retail_brokerage_api.OrderType": {
      "type": "string",
      "enum": [
        "UNKNOWN_ORDER_TYPE",
        "MARKET",
        "LIMIT",
        "STOP",
        "STOP_LIMIT",
        "BRACKET"
      ],
      "default": "UNKNOWN_ORDER_TYPE",
      "description": " - MARKET: A [market order](https://en.wikipedia.org/wiki/Order_(exchange)#Market_order)\n - LIMIT: A [limit order](https://en.wikipedia.org/wiki/Order_(exchange)#Limit_order)\n - STOP: A stop order is an order that becomes a market order when triggered\n - STOP_LIMIT: A stop order is a limit order that doesn't go on the book until it hits the stop price\n - BRACKET: A bracket order is a way to mitigate potential losses in volatile markets, consisting of a limit price leg and a stop trigger price. Note: Bracket orders are currently in closed beta and may be disabled to resolve issues during testing. Stay tuned for the public release coming soon."
    },
    "coinbase.public_api.authed.retail_brokerage_api.PerpetualProductDetails": {
      "type": "object",
      "properties": {
        "open_interest": {
          "type": "string"
        },
        "funding_rate": {
          "type": "string"
        },
        "funding_time": {
          "type": "string",
          "format": "RFC3339 Timestamp"
        },
        "max_leverage": {
          "type": "string"
        },
        "base_asset_uuid": {
          "type": "string"
        },
        "underlying_type": {
          "type": "string"
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.PnlConfiguration": {
      "type": "object",
      "properties": {
        "trigger_bracket_pnl": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.TriggerBracketPnl"
            }
          ]
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.PreviewEditOrderResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.EditOrderError"
          },
          "required": [
            "errors"
          ]
        },
        "slippage": {
          "type": "string"
        },
        "order_total": {
          "type": "string"
        },
        "commission_total": {
          "type": "string"
        },
        "quote_size": {
          "type": "string",
          "example": 10.0,
          "description": "The amount of the second Asset in the Trading Pair. For example, on the BTC/USD Order Book, USD is the Quote Asset."
        },
        "base_size": {
          "type": "string",
          "example": 0.001,
          "description": "The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset."
        },
        "best_bid": {
          "type": "string"
        },
        "best_ask": {
          "type": "string"
        },
        "average_filled_price": {
          "type": "string"
        }
      },
      "required": [
        "errors"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.PreviewFailureReason": {
      "type": "string",
      "enum": [
        "UNKNOWN_PREVIEW_FAILURE_REASON",
        "PREVIEW_MISSING_COMMISSION_RATE",
        "PREVIEW_INVALID_SIDE",
        "PREVIEW_INVALID_ORDER_CONFIG",
        "PREVIEW_INVALID_PRODUCT_ID",
        "PREVIEW_INVALID_SIZE_PRECISION",
        "PREVIEW_INVALID_PRICE_PRECISION",
        "PREVIEW_MISSING_PRODUCT_PRICE_BOOK",
        "PREVIEW_INVALID_LEDGER_BALANCE",
        "PREVIEW_INSUFFICIENT_LEDGER_BALANCE",
        "PREVIEW_INVALID_LIMIT_PRICE_POST_ONLY",
        "PREVIEW_INVALID_LIMIT_PRICE",
        "PREVIEW_INVALID_NO_LIQUIDITY",
        "PREVIEW_INSUFFICIENT_FUND",
        "PREVIEW_INVALID_COMMISSION_CONFIGURATION",
        "PREVIEW_INVALID_STOP_PRICE",
        "PREVIEW_INVALID_BASE_SIZE_TOO_LARGE",
        "PREVIEW_INVALID_BASE_SIZE_TOO_SMALL",
        "PREVIEW_INVALID_QUOTE_SIZE_PRECISION",
        "PREVIEW_INVALID_QUOTE_SIZE_TOO_LARGE",
        "PREVIEW_INVALID_PRICE_TOO_LARGE",
        "PREVIEW_INVALID_QUOTE_SIZE_TOO_SMALL",
        "PREVIEW_INSUFFICIENT_FUNDS_FOR_FUTURES",
        "PREVIEW_BREACHED_PRICE_LIMIT",
        "PREVIEW_BREACHED_ACCOUNT_POSITION_LIMIT",
        "PREVIEW_BREACHED_COMPANY_POSITION_LIMIT",
        "PREVIEW_INVALID_MARGIN_HEALTH",
        "PREVIEW_RISK_PROXY_FAILURE",
        "PREVIEW_UNTRADABLE_FCM_ACCOUNT_STATUS",
        "PREVIEW_IN_LIQUIDATION",
        "PREVIEW_INVALID_MARGIN_TYPE",
        "PREVIEW_INVALID_LEVERAGE",
        "PREVIEW_UNTRADABLE_PRODUCT",
        "PREVIEW_INVALID_FCM_TRADING_SESSION",
        "PREVIEW_NOT_ALLOWED_BY_MARKET_STATE",
        "PREVIEW_BREACHED_OPEN_INTEREST_LIMIT",
        "PREVIEW_GEOFENCING_RESTRICTION",
        "PREVIEW_INVALID_END_TIME",
        "PREVIEW_OPPOSITE_MARGIN_TYPE_EXISTS",
        "PREVIEW_QUOTE_SIZE_NOT_ALLOWED_FOR_BRACKET",
        "PREVIEW_INVALID_BRACKET_PRICES",
        "PREVIEW_MISSING_MARKET_TRADE_DATA",
        "PREVIEW_INVALID_BRACKET_LIMIT_PRICE",
        "PREVIEW_INVALID_BRACKET_STOP_TRIGGER_PRICE",
        "PREVIEW_BRACKET_LIMIT_PRICE_OUT_OF_BOUNDS",
        "PREVIEW_STOP_TRIGGER_PRICE_OUT_OF_BOUNDS",
        "PREVIEW_BRACKET_ORDER_NOT_SUPPORTED",
        "PREVIEW_INVALID_STOP_PRICE_PRECISION",
        "PREVIEW_STOP_PRICE_ABOVE_LIMIT_PRICE",
        "PREVIEW_STOP_PRICE_BELOW_LIMIT_PRICE",
        "PREVIEW_STOP_PRICE_ABOVE_LAST_TRADE_PRICE",
        "PREVIEW_STOP_PRICE_BELOW_LAST_TRADE_PRICE",
        "PREVIEW_FOK_DISABLED",
        "PREVIEW_FOK_ONLY_ALLOWED_ON_LIMIT_ORDERS",
        "PREVIEW_POST_ONLY_NOT_ALLOWED_WITH_FOK",
        "PREVIEW_UBO_HIGH_LEVERAGE_QUANTITY_BREACHED",
        "PREVIEW_ECOSYSTEM_LEVERAGE_UTILIZATION_BREACHED",
        "PREVIEW_CLOSE_ONLY_FAILURE",
        "PREVIEW_UBO_HIGH_LEVERAGE_NOTIONAL_BREACHED",
        "PREVIEW_END_TIME_TOO_FAR_IN_FUTURE",
        "PREVIEW_LIMIT_PRICE_TOO_FAR_FROM_MARKET",
        "PREVIEW_FUTURES_AFTER_HOUR_INVALID_ORDER_TYPE",
        "PREVIEW_FUTURES_AFTER_HOUR_INVALID_TIME_IN_FORCE",
        "PREVIEW_INVALID_ATTACHED_TAKE_PROFIT_PRICE",
        "PREVIEW_INVALID_ATTACHED_STOP_LOSS_PRICE",
        "PREVIEW_INVALID_ATTACHED_TAKE_PROFIT_PRICE_PRECISION",
        "PREVIEW_INVALID_ATTACHED_STOP_LOSS_PRICE_PRECISION",
        "PREVIEW_INVALID_ATTACHED_TAKE_PROFIT_PRICE_OUT_OF_BOUNDS",
        "PREVIEW_INVALID_ATTACHED_STOP_LOSS_PRICE_OUT_OF_BOUNDS",
        "PREVIEW_INVALID_BRACKET_ORDER_SIDE",
        "PREVIEW_BRACKET_ORDER_SIZE_EXCEEDS_POSITION",
        "PREVIEW_ORDER_SIZE_EXCEEDS_BRACKETED_POSITION",
        "PREVIEW_INVALID_LIMIT_PRICE_PRECISION",
        "PREVIEW_INVALID_STOP_TRIGGER_PRICE_PRECISION"
      ],
      "default": "UNKNOWN_PREVIEW_FAILURE_REASON"
    },
    "coinbase.public_api.authed.retail_brokerage_api.PreviewWarningMsg": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "BIG_ORDER",
        "SMALL_ORDER"
      ],
      "default": "UNKNOWN"
    },
    "coinbase.public_api.authed.retail_brokerage_api.PriceBook": {
      "type": "object",
      "properties": {
        "product_id": {
          "type": "string",
          "example": "BTC-USD",
          "description": "The trading pair (e.g. 'BTC-USD').",
          "required": [
            "product_id"
          ]
        },
        "bids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.L2Level"
          },
          "required": [
            "bids"
          ]
        },
        "asks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.L2Level"
          },
          "required": [
            "asks"
          ]
        },
        "time": {
          "type": "string",
          "format": "RFC3339 Timestamp"
        }
      },
      "required": [
        "product_id",
        "bids",
        "asks"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.Product": {
      "type": "object",
      "properties": {
        "product_id": {
          "type": "string",
          "example": "BTC-USD",
          "description": "The trading pair (e.g. 'BTC-USD').",
          "required": [
            "product_id"
          ]
        },
        "price": {
          "type": "string",
          "example": "140.21",
          "description": "The current price for the product, in quote currency.",
          "required": [
            "price"
          ]
        },
        "price_percentage_change_24h": {
          "type": "string",
          "example": "9.43%",
          "description": "The amount the price of the product has changed, in percent, in the last 24 hours.",
          "required": [
            "price_percentage_change_24h"
          ]
        },
        "volume_24h": {
          "type": "string",
          "example": "1908432",
          "description": "The trading volume for the product in the last 24 hours.",
          "required": [
            "volume_24h"
          ]
        },
        "volume_percentage_change_24h": {
          "type": "string",
          "example": "9.43%",
          "description": "The amount the volume of the product has changed, in percent, in the last 24 hours.",
          "required": [
            "volume_percentage_change_24h"
          ]
        },
        "base_increment": {
          "type": "string",
          "example": "0.00000001",
          "description": "Minimum amount base value can be increased or decreased at once.",
          "required": [
            "base_increment"
          ]
        },
        "quote_increment": {
          "type": "string",
          "example": "0.00000001",
          "description": "Minimum amount quote value can be increased or decreased at once.",
          "required": [
            "quote_increment"
          ]
        },
        "quote_min_size": {
          "type": "string",
          "example": "0.00000001",
          "description": "Minimum size that can be represented of quote currency.",
          "required": [
            "quote_min_size"
          ]
        },
        "quote_max_size": {
          "type": "string",
          "example": "1000",
          "description": "Maximum size that can be represented of quote currency.",
          "required": [
            "quote_max_size"
          ]
        },
        "base_min_size": {
          "type": "string",
          "example": "0.00000001",
          "description": "Minimum size that can be represented of base currency.",
          "required": [
            "base_min_size"
          ]
        },
        "base_max_size": {
          "type": "string",
          "example": "1000",
          "description": "Maximum size that can be represented of base currency.",
          "required": [
            "base_max_size"
          ]
        },
        "base_name": {
          "type": "string",
          "example": "Bitcoin",
          "description": "Name of the base currency.",
          "required": [
            "base_name"
          ]
        },
        "quote_name": {
          "type": "string",
          "example": "US Dollar",
          "description": "Name of the quote currency.",
          "required": [
            "quote_name"
          ]
        },
        "watched": {
          "type": "boolean",
          "example": true,
          "description": "Whether or not the product is on the user's watchlist.",
          "required": [
            "watched"
          ]
        },
        "is_disabled": {
          "type": "boolean",
          "example": false,
          "description": "Whether or not the product is disabled for trading.",
          "required": [
            "is_disabled"
          ]
        },
        "new": {
          "type": "boolean",
          "example": true,
          "description": "Whether or not the product is 'new'.",
          "required": [
            "new"
          ]
        },
        "status": {
          "type": "string",
          "description": "Status of the product.",
          "required": [
            "status"
          ]
        },
        "cancel_only": {
          "type": "boolean",
          "example": true,
          "description": "Whether or not orders of the product can only be cancelled, not placed or edited.",
          "required": [
            "cancel_only"
          ]
        },
        "limit_only": {
          "type": "boolean",
          "example": true,
          "description": "Whether or not orders of the product can only be limit orders, not market orders.",
          "required": [
            "limit_only"
          ]
        },
        "post_only": {
          "type": "boolean",
          "example": true,
          "description": "Whether or not orders of the product can only be posted, not cancelled.",
          "required": [
            "post_only"
          ]
        },
        "trading_disabled": {
          "type": "boolean",
          "example": false,
          "description": "Whether or not the product is disabled for trading for all market participants.",
          "required": [
            "trading_disabled"
          ]
        },
        "auction_mode": {
          "type": "boolean",
          "example": true,
          "description": "Whether or not the product is in auction mode.",
          "required": [
            "auction_mode"
          ]
        },
        "product_type": {
          "description": "Type of the product.",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.ProductType"
            }
          ]
        },
        "quote_currency_id": {
          "type": "string",
          "example": "USD",
          "description": "Symbol of the quote currency."
        },
        "base_currency_id": {
          "type": "string",
          "example": "BTC",
          "description": "Symbol of the base currency."
        },
        "fcm_trading_session_details": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.FcmTradingSessionDetails"
            }
          ]
        },
        "mid_market_price": {
          "type": "string",
          "example": "140.22",
          "description": "The current midpoint of the bid-ask spread, in quote currency."
        },
        "alias": {
          "type": "string",
          "example": "BTC-USD",
          "description": "Product id for the corresponding unified book."
        },
        "alias_to": {
          "type": "array",
          "example": [
            "BTC-USDC"
          ],
          "items": {
            "type": "string"
          },
          "description": "Product ids that this product serves as an alias for."
        },
        "base_display_symbol": {
          "type": "string",
          "example": "BTC",
          "description": "Symbol of the base display currency.",
          "required": [
            "base_display_symbol"
          ]
        },
        "quote_display_symbol": {
          "type": "string",
          "example": "USD",
          "description": "Symbol of the quote display currency.",
          "required": [
            "quote_display_symbol"
          ]
        },
        "view_only": {
          "type": "boolean",
          "example": true,
          "description": "Reflects whether an FCM product has expired. For SPOT, set get_tradability_status to get a return value here. Defaulted to false for all other product types."
        },
        "price_increment": {
          "type": "string",
          "example": "0.00000001",
          "description": "Minimum amount price can be increased or decreased at once."
        },
        "display_name": {
          "type": "string",
          "example": "BTC PERP",
          "description": "Display name for the product e.g. BTC-PERP-INTX => BTC PERP"
        },
        "product_venue": {
          "example": "neptune",
          "description": "The sole venue id for the product. Defaults to CBE if the product is not specific to a single venue",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.ProductVenue"
            }
          ]
        },
        "approximate_quote_24h_volume": {
          "type": "string",
          "example": "1908432",
          "description": "The approximate trading volume for the product in the last 24 hours based on the current quote."
        },
        "future_product_details": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.FutureProductDetails"
            }
          ]
        }
      },
      "title": "Get Products",
      "required": [
        "product_id",
        "price",
        "volume_24h",
        "price_percentage_change_24h",
        "volume_percentage_change_24h",
        "base_increment",
        "quote_increment",
        "quote_min_size",
        "quote_max_size",
        "base_min_size",
        "base_max_size",
        "base_name",
        "quote_name",
        "watched",
        "is_disabled",
        "new",
        "status",
        "cancel_only",
        "limit_only",
        "post_only",
        "trading_disabled",
        "auction_mode",
        "base_display_symbol",
        "quote_display_symbol"
      ]
    },
    "coinbase.public_api.authed.retail_brokerage_api.ProductType": {
      "type": "string",
      "enum": [
        "UNKNOWN_PRODUCT_TYPE",
        "SPOT",
        "FUTURE"
      ],
      "default": "UNKNOWN_PRODUCT_TYPE"
    },
    "coinbase.public_api.authed.retail_brokerage_api.ProductVenue": {
      "type": "string",
      "enum": [
        "UNKNOWN_VENUE_TYPE",
        "CBE",
        "FCM",
        "INTX"
      ],
      "default": "UNKNOWN_VENUE_TYPE"
    },
    "coinbase.public_api.authed.retail_brokerage_api.Products": {
      "type": "object",
      "properties": {
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.Product"
          },
          "description": "Array of objects, each representing one product."
        },
        "num_products": {
          "type": "integer",
          "format": "int32",
          "example": 100,
          "description": "Number of products that were returned."
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.RejectReason": {
      "type": "string",
      "enum": [
        "REJECT_REASON_UNSPECIFIED",
        "HOLD_FAILURE",
        "TOO_MANY_OPEN_ORDERS",
        "REJECT_REASON_INSUFFICIENT_FUNDS",
        "RATE_LIMIT_EXCEEDED"
      ],
      "default": "REJECT_REASON_UNSPECIFIED"
    },
    "coinbase.public_api.authed.retail_brokerage_api.RiskManagementType": {
      "type": "string",
      "enum": [
        "UNKNOWN_RISK_MANAGEMENT_TYPE",
        "MANAGED_BY_FCM",
        "MANAGED_BY_VENUE"
      ],
      "default": "UNKNOWN_RISK_MANAGEMENT_TYPE"
    },
    "coinbase.public_api.authed.retail_brokerage_api.SingleProductGetProductBookConfig": {
      "type": "object",
      "properties": {
        "product_id": {
          "type": "string",
          "example": "BTC-USD",
          "description": "The trading pair (e.g. 'BTC-USD').",
          "required": [
            "product_id"
          ]
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "example": 1000,
          "description": "The number of bid/asks to be returned. "
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.SorLimitIoc": {
      "type": "object",
      "properties": {
        "base_size": {
          "type": "string",
          "example": "0.001",
          "description": "The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset."
        },
        "limit_price": {
          "type": "string",
          "example": "10000.00",
          "description": "The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price."
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.StopLimitStopLimitGtc": {
      "type": "object",
      "properties": {
        "base_size": {
          "type": "string",
          "example": "0.001",
          "description": "The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset."
        },
        "limit_price": {
          "type": "string",
          "example": "10000.00",
          "description": "The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price."
        },
        "stop_price": {
          "type": "string",
          "example": "20000.00",
          "description": "The specified price that will trigger the placement of the Order."
        },
        "stop_direction": {
          "example": "20000.00",
          "description": "The direction of the stop limit Order. If Up, then the Order will trigger when the last trade price goes above the stop_price. If Down, then the Order will trigger when the last trade price goes below the stop_price.",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.StopPriceDirection"
            }
          ]
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.StopLimitStopLimitGtd": {
      "type": "object",
      "properties": {
        "base_size": {
          "type": "string",
          "example": 0.001,
          "description": "The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset."
        },
        "limit_price": {
          "type": "string",
          "example": "10000.00",
          "description": "The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price."
        },
        "stop_price": {
          "type": "string",
          "example": "20000.00",
          "description": "The specified price that will trigger the placement of the Order."
        },
        "end_time": {
          "type": "string",
          "format": "RFC3339 Timestamp",
          "example": "2021-05-31T09:59:59Z",
          "description": "The time at which the order will be cancelled if it is not Filled."
        },
        "stop_direction": {
          "example": "20000.00",
          "description": "The direction of the stop limit Order. If Up, then the Order will trigger when the last trade price goes above the stop_price. If Down, then the Order will trigger when the last trade price goes below the stop_price.",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.public_api.authed.retail_brokerage_api.StopPriceDirection"
            }
          ]
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.StopPriceDirection": {
      "type": "string",
      "enum": [
        "STOP_DIRECTION_STOP_UP",
        "STOP_DIRECTION_STOP_DOWN"
      ],
      "default": "",
      "title": "- STOP_DIRECTION_STOP_UP: Order will trigger if the last trade price goes above the stop price\n - STOP_DIRECTION_STOP_DOWN: Order will trigger if the last trade price goes below the stop price"
    },
    "coinbase.public_api.authed.retail_brokerage_api.StopTriggerStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN_TRIGGER_STATUS",
        "INVALID_ORDER_TYPE",
        "STOP_PENDING",
        "STOP_TRIGGERED"
      ],
      "default": "UNKNOWN_TRIGGER_STATUS"
    },
    "coinbase.public_api.authed.retail_brokerage_api.TimeInForceType": {
      "type": "string",
      "enum": [
        "UNKNOWN_TIME_IN_FORCE",
        "GOOD_UNTIL_DATE_TIME",
        "GOOD_UNTIL_CANCELLED",
        "IMMEDIATE_OR_CANCEL",
        "FILL_OR_KILL"
      ],
      "default": "UNKNOWN_TIME_IN_FORCE",
      "title": "- GOOD_UNTIL_DATE_TIME: GTD\n - GOOD_UNTIL_CANCELLED: GTC: on the books virtually forever\n - IMMEDIATE_OR_CANCEL: IOC: fill what you can now, cancel the rest\n - FILL_OR_KILL: FOK: all or nothing, right now"
    },
    "coinbase.public_api.authed.retail_brokerage_api.TriggerBracketGtc": {
      "type": "object",
      "properties": {
        "base_size": {
          "type": "string",
          "example": 0.001,
          "description": "The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset."
        },
        "limit_price": {
          "type": "string",
          "example": "10000.00",
          "description": "The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price."
        },
        "stop_trigger_price": {
          "type": "string",
          "example": "20000.00",
          "description": "The price level (in quote currency) where the position will be exited. When triggered, a stop limit order is automatically placed with a limit price 5% higher for BUYS and 5% lower for SELLS."
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.TriggerBracketGtd": {
      "type": "object",
      "properties": {
        "base_size": {
          "type": "string",
          "example": 0.001,
          "description": "The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset."
        },
        "limit_price": {
          "type": "string",
          "example": "10000.00",
          "description": "The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price."
        },
        "stop_trigger_price": {
          "type": "string",
          "example": "20000.00",
          "description": "The price level (in quote currency) where the position will be exited. When triggered, a stop limit order is automatically placed with a limit price 5% higher for BUYS and 5% lower for SELLS."
        },
        "end_time": {
          "type": "string",
          "format": "RFC3339 Timestamp",
          "example": "2021-05-31T09:59:59Z",
          "description": "The time at which the order will be cancelled if it is not Filled."
        }
      }
    },
    "coinbase.public_api.authed.retail_brokerage_api.TriggerBracketPnl": {
      "type": "object",
      "properties": {
        "take_profit_pnl": {
          "type": "string"
        },
        "stop_loss_pnl": {
          "type": "string"
        }
      },
      "title": "PNL Configurations"
    },
    "coinbase.public_api.authed.retail_brokerage_api.TwapLimitGtd": {
      "type": "object",
      "properties": {
        "quote_size": {
          "type": "string",
          "example": "10.00",
          "description": "The amount of the second Asset in the Trading Pair. For example, on the BTC/USD Order Book, USD is the Quote Asset."
        },
        "base_size": {
          "type": "string",
          "example": "0.001",
          "description": "The amount of the first Asset in the Trading Pair. For example, on the BTC-USD Order Book, BTC is the Base Asset."
        },
        "start_time": {
          "type": "string",
          "format": "RFC3339 Timestamp",
          "example": "2021-05-31T07:59:59Z",
          "description": "Time at which the order should begin executing."
        },
        "end_time": {
          "type": "string",
          "format": "RFC3339 Timestamp",
          "example": "2021-05-31T09:59:59Z",
          "description": "The time at which the order will be cancelled if it is not Filled."
        },
        "limit_price": {
          "type": "string",
          "example": "10000.00",
          "description": "The specified price, or better, that the Order should be executed at. A Buy Order will execute at or lower than the limit price. A Sell Order will execute at or higher than the limit price."
        }
      }
    },
    "coinbase.retail.rest.proxy.common.ExtendedTimestamp": {
      "type": "object",
      "properties": {
        "iso": {
          "type": "string",
          "description": "An ISO-8601 representation of the timestamp"
        },
        "epochSeconds": {
          "type": "string",
          "format": "int64",
          "description": "A second-precision representation of the timestamp"
        },
        "epochMillis": {
          "type": "string",
          "format": "int64",
          "description": "A millisecond-precision representation of the timestamp"
        }
      }
    },
    "coinbase.retail.rest.proxy.convert.CommitConvertTradeRequest": {
      "type": "object",
      "properties": {
        "from_account": {
          "type": "string",
          "description": "The currency of the account to convert from (e.g. USD).",
          "required": true
        },
        "to_account": {
          "type": "string",
          "description": "The currency of the account to convert to (e.g. USDC).",
          "required": true
        }
      }
    },
    "coinbase.retail.rest.proxy.convert.CommitConvertTradeResponse": {
      "type": "object",
      "properties": {
        "trade": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.convert.RatConvertTrade"
            }
          ]
        }
      }
    },
    "coinbase.retail.rest.proxy.convert.CreateConvertQuoteRequest": {
      "type": "object",
      "properties": {
        "from_account": {
          "type": "string",
          "description": "The currency of the account to convert from (e.g. USD).",
          "required": true
        },
        "to_account": {
          "type": "string",
          "description": "The currency of the account to convert to (e.g. USDC).",
          "required": true
        },
        "amount": {
          "type": "string",
          "description": "The amount to be converted (denominated in the currency specified in `from_account`).",
          "required": true
        },
        "trade_incentive_metadata": {
          "description": "Trade incentive to waive trade fees.",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.simple_trade.TradeIncentiveMetadata"
            }
          ]
        }
      },
      "title": ""
    },
    "coinbase.retail.rest.proxy.convert.CreateConvertQuoteResponse": {
      "type": "object",
      "properties": {
        "trade": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.convert.RatConvertTrade"
            }
          ]
        }
      }
    },
    "coinbase.retail.rest.proxy.convert.GetConvertTradeResponse": {
      "type": "object",
      "properties": {
        "trade": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.convert.RatConvertTrade"
            }
          ]
        }
      }
    },
    "coinbase.retail.rest.proxy.convert.RatConvertTrade": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The trade ID used to get and commit the trade."
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.simple_trade.TradeStatus"
            }
          ]
        },
        "user_entered_amount": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "amount": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "subtotal": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "total": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.simple_trade.Fee"
          },
          "description": "List of fees associated with the trade"
        },
        "total_fee": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.simple_trade.Fee"
            }
          ]
        },
        "source": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.PaymentMethod"
            }
          ]
        },
        "target": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.payments.common.payment_methods.PaymentMethod"
            }
          ]
        },
        "unit_price": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.simple_trade.UnitPrice"
            }
          ]
        },
        "user_warnings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.simple_trade.UserWarning"
          }
        },
        "user_reference": {
          "type": "string"
        },
        "source_currency": {
          "type": "string",
          "description": "The currency of the source account"
        },
        "target_currency": {
          "type": "string",
          "description": "The currency of the target account"
        },
        "cancellation_reason": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.simple_trade.Error"
            }
          ]
        },
        "source_id": {
          "type": "string"
        },
        "target_id": {
          "type": "string"
        },
        "subscription_info": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.simple_trade.SubscriptionInfo"
            }
          ]
        },
        "exchange_rate": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "tax_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.simple_trade.TaxInfo"
          }
        },
        "trade_incentive_info": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.simple_trade.TradeIncentiveInfo"
            }
          ]
        },
        "total_fee_without_tax": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.simple_trade.Fee"
            }
          ]
        },
        "fiat_denoted_total": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        }
      },
      "title": ""
    },
    "coinbase.retail.rest.proxy.fcm.CancelFCMSweepResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "coinbase.retail.rest.proxy.fcm.FCMBalanceSummary": {
      "type": "object",
      "properties": {
        "futures_buying_power": {
          "description": "The amount of your cash balance that is available to trade CFM futures",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "total_usd_balance": {
          "description": "Aggregate USD maintained across your CFTC-regulated futures account and your Coinbase Inc. spot account",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "cbi_usd_balance": {
          "description": "USD maintained in your Coinbase Inc. spot account",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "cfm_usd_balance": {
          "description": "USD maintained in your CFTC-regulated futures account. Funds held in your futures account are not available to trade spot",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "total_open_orders_hold_amount": {
          "description": "Your total balance on hold for spot and futures open orders",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "unrealized_pnl": {
          "description": "Your current unrealized PnL across all open positions",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "daily_realized_pnl": {
          "description": "Your realized PnL from the current trade date. May include profit or loss from positions you\u2019ve closed on the current trade date",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "initial_margin": {
          "description": "Margin required to initiate futures positions. Once futures orders are placed, these funds cannot be used to trade spot. The actual amount of funds necessary to support executed futures orders will be moved to your futures account",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "available_margin": {
          "description": "Funds available to meet your anticipated margin requirement. This includes your CBI spot USD, CFM futures USD, and Futures PnL, less any holds for open spot or futures orders",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "liquidation_threshold": {
          "description": "When your available funds for collateral drop to the liquidation threshold, some or all of your futures positions will be liquidated",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "liquidation_buffer_amount": {
          "description": "Funds available in excess of the liquidation threshold, calculated as available margin minus liquidation threshold. If your liquidation buffer amount reaches 0, your futures positions and/or open orders will be liquidated as necessary",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "liquidation_buffer_percentage": {
          "type": "string",
          "description": "Funds available in excess of the liquidation threshold expressed as a percentage. If your liquidation buffer percentage reaches 0%, your futures positions and/or open orders will be liquidated as necessary"
        },
        "intraday_margin_window_measure": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.FcmMarginWindowMeasure"
            }
          ]
        },
        "overnight_margin_window_measure": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.FcmMarginWindowMeasure"
            }
          ]
        }
      }
    },
    "coinbase.retail.rest.proxy.fcm.FCMPosition": {
      "type": "object",
      "properties": {
        "product_id": {
          "type": "string",
          "description": "The ticker symbol (e.g. 'BIT-28JUL23-CDE')."
        },
        "expiration_time": {
          "type": "string",
          "format": "RFC3339 Timestamp",
          "description": "The expiry of your position"
        },
        "side": {
          "description": "The side of your position",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.FCMPositionSide"
            }
          ]
        },
        "number_of_contracts": {
          "type": "string",
          "description": "The size of your position in contracts"
        },
        "current_price": {
          "type": "string",
          "description": "The current price of the product"
        },
        "avg_entry_price": {
          "type": "string",
          "description": "The average entry price at which you entered your current position"
        },
        "unrealized_pnl": {
          "type": "string",
          "description": "Your current unrealized PnL for your position"
        },
        "daily_realized_pnl": {
          "type": "string",
          "description": "Your realized PnL from your trades in this product on current trade date"
        }
      }
    },
    "coinbase.retail.rest.proxy.fcm.FCMPositionSide": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "LONG",
        "SHORT"
      ],
      "default": "UNKNOWN"
    },
    "coinbase.retail.rest.proxy.fcm.FCMSweep": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the sweep request scheduled"
        },
        "requested_amount": {
          "description": "The requested sweep amount",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "should_sweep_all": {
          "type": "boolean",
          "description": "True if the request was to sweep all available funds from your CFM futures account"
        },
        "status": {
          "description": "A pending sweep is a sweep that has not started processing and can be cancelled. A processing sweep is a sweep that is currently being processed and cannot be cancelled",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.FCMSweepStatus"
            }
          ]
        },
        "scheduled_time": {
          "type": "string",
          "format": "RFC3339 Timestamp",
          "description": "The timestamp at which the sweep request was submitted"
        }
      }
    },
    "coinbase.retail.rest.proxy.fcm.FCMSweepStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN_FCM_SWEEP_STATUS",
        "PENDING",
        "PROCESSING"
      ],
      "default": "UNKNOWN_FCM_SWEEP_STATUS"
    },
    "coinbase.retail.rest.proxy.fcm.FcmMarginWindowMeasure": {
      "type": "object",
      "properties": {
        "margin_window_type": {
          "description": "Your margin window",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.FcmMarginWindowType"
            }
          ]
        },
        "margin_level": {
          "description": "Margin level for liquidation purposes",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.MarginLevelType"
            }
          ]
        },
        "initial_margin": {
          "type": "string",
          "description": "Initial margin"
        },
        "maintenance_margin": {
          "type": "string",
          "description": "Maintenance margin"
        },
        "liquidation_buffer": {
          "type": "string",
          "description": "Liquidation buffer"
        },
        "total_hold": {
          "type": "string",
          "description": "Total Hold"
        },
        "futures_buying_power": {
          "type": "string",
          "description": "The amount of your cash balance that is available to trade CFM futures"
        }
      }
    },
    "coinbase.retail.rest.proxy.fcm.FcmMarginWindowType": {
      "type": "string",
      "enum": [
        "FCM_MARGIN_WINDOW_TYPE_UNSPECIFIED",
        "FCM_MARGIN_WINDOW_TYPE_OVERNIGHT",
        "FCM_MARGIN_WINDOW_TYPE_WEEKEND",
        "FCM_MARGIN_WINDOW_TYPE_INTRADAY",
        "FCM_MARGIN_WINDOW_TYPE_TRANSITION"
      ],
      "default": "FCM_MARGIN_WINDOW_TYPE_UNSPECIFIED"
    },
    "coinbase.retail.rest.proxy.fcm.GetCurrentMarginWindowResponse": {
      "type": "object",
      "properties": {
        "margin_window": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.MarginWindow"
            }
          ]
        },
        "is_intraday_margin_killswitch_enabled": {
          "type": "boolean",
          "description": "True if intraday margin killswitch is enabled"
        },
        "is_intraday_margin_enrollment_killswitch_enabled": {
          "type": "boolean",
          "description": "True if intraday margin enrollment killswitch is enabled"
        }
      },
      "title": "GetCurrentMarginWindowResponse"
    },
    "coinbase.retail.rest.proxy.fcm.GetFCMBalanceSummaryResponse": {
      "type": "object",
      "properties": {
        "balance_summary": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.FCMBalanceSummary"
            }
          ]
        }
      }
    },
    "coinbase.retail.rest.proxy.fcm.GetFCMPositionResponse": {
      "type": "object",
      "properties": {
        "position": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.FCMPosition"
            }
          ]
        }
      }
    },
    "coinbase.retail.rest.proxy.fcm.GetFCMPositionsResponse": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.FCMPosition"
          }
        }
      }
    },
    "coinbase.retail.rest.proxy.fcm.GetFCMSweepsResponse": {
      "type": "object",
      "properties": {
        "sweeps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.FCMSweep"
          }
        }
      }
    },
    "coinbase.retail.rest.proxy.fcm.GetIntradayMarginSettingResponse": {
      "type": "object",
      "properties": {
        "setting": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.IntradayMarginSetting"
            }
          ]
        }
      },
      "title": "GetIntradayMarginSettingResponse"
    },
    "coinbase.retail.rest.proxy.fcm.IntradayMarginSetting": {
      "type": "string",
      "enum": [
        "INTRADAY_MARGIN_SETTING_UNSPECIFIED",
        "INTRADAY_MARGIN_SETTING_STANDARD",
        "INTRADAY_MARGIN_SETTING_INTRADAY"
      ],
      "default": "INTRADAY_MARGIN_SETTING_UNSPECIFIED",
      "title": ""
    },
    "coinbase.retail.rest.proxy.fcm.MarginLevelType": {
      "type": "string",
      "enum": [
        "MARGIN_LEVEL_TYPE_UNSPECIFIED",
        "MARGIN_LEVEL_TYPE_BASE",
        "MARGIN_LEVEL_TYPE_WARNING",
        "MARGIN_LEVEL_TYPE_DANGER",
        "MARGIN_LEVEL_TYPE_LIQUIDATION"
      ],
      "default": "MARGIN_LEVEL_TYPE_UNSPECIFIED",
      "title": "margin level for liquidation purposes"
    },
    "coinbase.retail.rest.proxy.fcm.MarginProfileType": {
      "type": "string",
      "enum": [
        "MARGIN_PROFILE_TYPE_UNSPECIFIED",
        "MARGIN_PROFILE_TYPE_RETAIL_REGULAR",
        "MARGIN_PROFILE_TYPE_RETAIL_INTRADAY_MARGIN_1"
      ],
      "default": "MARGIN_PROFILE_TYPE_UNSPECIFIED"
    },
    "coinbase.retail.rest.proxy.fcm.MarginWindow": {
      "type": "object",
      "properties": {
        "margin_window_type": {
          "description": "Your margin window",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.MarginWindowType"
            }
          ]
        },
        "end_time": {
          "type": "string",
          "format": "RFC3339 Timestamp",
          "description": "The end time of the margin window"
        }
      }
    },
    "coinbase.retail.rest.proxy.fcm.MarginWindowType": {
      "type": "string",
      "enum": [
        "MARGIN_WINDOW_TYPE_UNSPECIFIED",
        "MARGIN_WINDOW_TYPE_OVERNIGHT",
        "MARGIN_WINDOW_TYPE_WEEKEND",
        "MARGIN_WINDOW_TYPE_INTRADAY",
        "MARGIN_WINDOW_TYPE_TRANSITION"
      ],
      "default": "MARGIN_WINDOW_TYPE_UNSPECIFIED",
      "title": ""
    },
    "coinbase.retail.rest.proxy.fcm.ScheduleFCMSweepRequest": {
      "type": "object",
      "properties": {
        "usd_amount": {
          "type": "string",
          "description": "The amount of USD to be swept. By default, sweeps all available excess funds."
        }
      },
      "title": ""
    },
    "coinbase.retail.rest.proxy.fcm.ScheduleFCMSweepResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "coinbase.retail.rest.proxy.fcm.SetIntradayMarginSettingRequest": {
      "type": "object",
      "properties": {
        "setting": {
          "description": "The margin setting for the account. Describes whether the account is opted in to receive increased leverage during weekdays (8am-4pm ET), excluding [market holidays](https://www.coinbase.com/derivatives/market-notices).",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.fcm.IntradayMarginSetting"
            }
          ]
        }
      },
      "title": "SetIntradayMarginSettingRequest"
    },
    "coinbase.retail.rest.proxy.fcm.SetIntradayMarginSettingResponse": {
      "type": "object",
      "title": "SetIntradayMarginSettingResponse"
    },
    "coinbase.retail.rest.proxy.intx.AllocatePortfolioRequest": {
      "type": "object",
      "properties": {
        "portfolio_uuid": {
          "type": "string",
          "description": "The portfolio UUID.",
          "required": true
        },
        "symbol": {
          "type": "string",
          "description": "The trading pair (e.g. 'BTC-PERP-INTX').",
          "required": true
        },
        "amount": {
          "type": "string",
          "description": "The amount to be allocated for the specified isolated position.",
          "required": true
        },
        "currency": {
          "type": "string",
          "description": "The currency to be allocated for the specific isolated position (e.g. USD, BTC, etc).",
          "required": true
        }
      }
    },
    "coinbase.retail.rest.proxy.intx.AllocatePortfolioResponse": {
      "type": "object"
    },
    "coinbase.retail.rest.proxy.intx.Amount": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Value of the Amount"
        },
        "currency": {
          "type": "string",
          "description": "The currency to be allocated for the specific isolated position (e.g. USD, BTC, etc)."
        }
      },
      "title": "Message that represents the monetary amount."
    },
    "coinbase.retail.rest.proxy.intx.GetPortfoliosResponse": {
      "type": "object",
      "properties": {
        "portfolios": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Portfolio"
          }
        },
        "summary": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.PortfoliosSummary"
            }
          ]
        }
      }
    },
    "coinbase.retail.rest.proxy.intx.GetPositionResponse": {
      "type": "object",
      "properties": {
        "position": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Position"
            }
          ]
        }
      }
    },
    "coinbase.retail.rest.proxy.intx.GetPositionsResponse": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Position"
          }
        },
        "summary": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.PositionSummary"
            }
          ]
        }
      }
    },
    "coinbase.retail.rest.proxy.intx.MultiAssetCollateralRequest": {
      "type": "object",
      "properties": {
        "portfolio_uuid": {
          "type": "string",
          "description": "The portfolio UUID."
        },
        "multi_asset_collateral_enabled": {
          "type": "boolean",
          "description": "Enable or disable Multi Asset Collateral."
        }
      },
      "title": "Multi Asset Collateral"
    },
    "coinbase.retail.rest.proxy.intx.MultiAssetCollateralResponse": {
      "type": "object",
      "properties": {
        "multi_asset_collateral_enabled": {
          "type": "boolean"
        }
      }
    },
    "coinbase.retail.rest.proxy.intx.Portfolio": {
      "type": "object",
      "properties": {
        "portfolio_uuid": {
          "type": "string",
          "description": "The portfolio UUID."
        },
        "collateral": {
          "type": "string",
          "description": "The total collateral value in USDC for the portfolio"
        },
        "position_notional": {
          "type": "string",
          "description": "The total position notional value in USDC for all positions in the portfolio"
        },
        "open_position_notional": {
          "type": "string",
          "description": "The total position notional value in USDC for all open orders and positions"
        },
        "pending_fees": {
          "type": "string",
          "description": "The accrued fees that has not been paid yet in USDC"
        },
        "borrow": {
          "type": "string",
          "description": "Total borrow amount in USDC (nets the USDC balance, position PNL, held USDC, accured interest and rolling debt)"
        },
        "accrued_interest": {
          "type": "string",
          "description": "Interest charged for borrowed USDC balances"
        },
        "rolling_debt": {
          "type": "string",
          "description": "Amount of settled transactions that hasn't been paid"
        },
        "portfolio_initial_margin": {
          "type": "string",
          "description": "The weighted average of all the position's initial margin utilization"
        },
        "portfolio_im_notional": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Amount"
            }
          ]
        },
        "portfolio_maintenance_margin": {
          "type": "string",
          "description": "The maintenance margin of the portfolio"
        },
        "portfolio_mm_notional": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Amount"
            }
          ]
        },
        "liquidation_percentage": {
          "type": "string",
          "description": "The liquidation percentage of the portfolio"
        },
        "liquidation_buffer": {
          "type": "string",
          "description": "The liquidation buffer of the portfolio"
        },
        "margin_type": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.intx_common.PortfolioMarginType"
            }
          ]
        },
        "margin_flags": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.intx_common.PortfolioMarginFlags"
            }
          ]
        },
        "liquidation_status": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.intx_common.PortfolioLiquidationStatus"
            }
          ]
        },
        "unrealized_pnl": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Amount"
            }
          ]
        },
        "total_balance": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Amount"
            }
          ]
        }
      }
    },
    "coinbase.retail.rest.proxy.intx.PortfoliosSummary": {
      "type": "object",
      "properties": {
        "unrealized_pnl": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Amount"
            }
          ]
        },
        "buying_power": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Amount"
            }
          ]
        },
        "total_balance": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Amount"
            }
          ]
        },
        "max_withdrawal_amount": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Amount"
            }
          ]
        }
      }
    },
    "coinbase.retail.rest.proxy.intx.Position": {
      "type": "object",
      "properties": {
        "product_id": {
          "type": "string",
          "description": "The unique identifier of the instrument the position is in."
        },
        "product_uuid": {
          "type": "string",
          "description": "The unique identifier of the instrument the position is in."
        },
        "portfolio_uuid": {
          "type": "string",
          "description": "The portfolio UUID."
        },
        "symbol": {
          "type": "string",
          "description": "The trading pair (e.g. 'BTC-PERP-INTX')."
        },
        "vwap": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Amount"
            }
          ]
        },
        "entry_vwap": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Amount"
            }
          ]
        },
        "position_side": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.intx_common.PositionSide"
            }
          ]
        },
        "margin_type": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.intx_common.PortfolioMarginType"
            }
          ]
        },
        "net_size": {
          "type": "string",
          "description": "The size of the position with positive values reflecting a long position and negative values reflecting a short position."
        },
        "buy_order_size": {
          "type": "string",
          "description": "Cumulative size of all the open buy orders"
        },
        "sell_order_size": {
          "type": "string",
          "description": "Cumulative size of all the open sell orders"
        },
        "im_contribution": {
          "type": "string",
          "description": "The amount this position contributes to the initial margin"
        },
        "unrealized_pnl": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Amount"
            }
          ]
        },
        "mark_price": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Amount"
            }
          ]
        },
        "liquidation_price": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Amount"
            }
          ]
        },
        "leverage": {
          "type": "string",
          "description": "The leverage of this position"
        },
        "im_notional": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Amount"
            }
          ]
        },
        "mm_notional": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Amount"
            }
          ]
        },
        "position_notional": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Amount"
            }
          ]
        },
        "aggregated_pnl": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Amount"
            }
          ]
        }
      }
    },
    "coinbase.retail.rest.proxy.intx.PositionSummary": {
      "type": "object",
      "properties": {
        "aggregated_pnl": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.intx.Amount"
            }
          ]
        }
      }
    },
    "coinbase.retail.rest.proxy.payment_method.GetPaymentMethodResponse": {
      "type": "object",
      "properties": {
        "payment_method": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.retail.rest.proxy.payment_method.PaymentMethod"
            }
          ]
        }
      }
    },
    "coinbase.retail.rest.proxy.payment_method.GetPaymentMethodsResponse": {
      "type": "object",
      "properties": {
        "payment_methods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coinbase.retail.rest.proxy.payment_method.PaymentMethod"
          }
        }
      }
    },
    "coinbase.retail.rest.proxy.payment_method.PaymentMethod": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "8bfc20d7-f7c6-4422-bf07-8243ca4169fe",
          "description": "Unique identifier for the payment method."
        },
        "type": {
          "type": "string",
          "example": "ACH",
          "description": "The payment method type."
        },
        "name": {
          "type": "string",
          "example": "ALLY BANK ******1234",
          "description": "Name for the payment method."
        },
        "currency": {
          "type": "string",
          "example": "USD",
          "description": "Currency symbol for the payment method."
        },
        "verified": {
          "type": "boolean",
          "example": true,
          "description": "The verified status of the payment method."
        },
        "allow_buy": {
          "type": "boolean",
          "example": true,
          "description": "Whether or not this payment method can perform buys."
        },
        "allow_sell": {
          "type": "boolean",
          "example": true,
          "description": "Whether or not this payment method can perform sells."
        },
        "allow_deposit": {
          "type": "boolean",
          "example": true,
          "description": "Whether or not this payment method can perform deposits."
        },
        "allow_withdraw": {
          "type": "boolean",
          "example": true,
          "description": "Whether or not this payment method can perform withdrawals."
        },
        "created_at": {
          "type": "string",
          "format": "RFC3339 Timestamp",
          "example": "2021-05-31T09:59:59Z",
          "description": "Time at which this payment method was created."
        },
        "updated_at": {
          "type": "string",
          "format": "RFC3339 Timestamp",
          "example": "2021-05-31T09:59:59Z",
          "description": "Time at which this payment method was updated."
        }
      }
    },
    "coinbase.retail.rest.proxy.utility.GetApiKeyPermissionsResponse": {
      "type": "object",
      "properties": {
        "can_view": {
          "type": "boolean",
          "description": "Indicates whether the API key has view permissions."
        },
        "can_trade": {
          "type": "boolean",
          "description": "Indicates whether the API key has trade permissions."
        },
        "can_transfer": {
          "type": "boolean",
          "description": "Indicates whether the API key has deposit/withdrawal permissions."
        },
        "portfolio_uuid": {
          "type": "string",
          "description": "The portfolio ID associated with the API key."
        },
        "portfolio_type": {
          "description": "The type of portfolio",
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.portfolio_service.PortfolioType"
            }
          ]
        }
      }
    },
    "coinbase.simple_trade.Disclosure": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "link": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Link"
            }
          ]
        }
      },
      "title": "Disclosure represents a localized disclosure for a fee"
    },
    "coinbase.simple_trade.Error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "error_code": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.simple_trade.ErrorCodes"
            }
          ]
        },
        "error_cta": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.simple_trade.ErrorCta"
            }
          ]
        }
      },
      "description": "these are errors which prevent us from creating trades. Ie, BlackListed card",
      "title": "Error is a generic message/code response used for cancellation reasons.\nThese include a CTA"
    },
    "coinbase.simple_trade.ErrorCodes": {
      "type": "string",
      "enum": [
        "ERROR_CODES_UNSPECIFIED",
        "ERROR_CODES_AUTHENTICATION_ERROR",
        "ERROR_CODES_PERMISSION_DENIED",
        "ERROR_CODES_NOT_FOUND",
        "ERROR_CODES_INTERNAL_SERVER_ERROR",
        "ERROR_CODES_SERVICE_UNAVAILABLE",
        "ERROR_CODES_INVALID",
        "ERROR_CODES_REJECTED",
        "ERROR_CODES_LIMIT_ERROR",
        "ERROR_CODES_LIMIT_ERROR_INCREASE_ELIGIBLE",
        "HIGH_RISK_SCORE_CANCELED",
        "ERROR_CODES_DEPOSIT_CHECK_QUESTIONNAIRE_REQUIRED",
        "ERROR_CODES_DEPOSIT_CHECK_FACEMATCH_REQUIRED",
        "ERROR_CODES_DEPOSIT_CHECK_FACEMATCH_AND_QUESTIONNAIRE_REQUIRED",
        "ERROR_CODES_INSUFFICIENT_BALANCE",
        "ERROR_CODES_RATE_LIMITED",
        "ERROR_CODES_ADDRESS_MISMATCH",
        "ERROR_CODES_TRANSACTION_NOT_ALLOWED",
        "DEPOSIT_NOT_AUTHORIZED",
        "PLAID_INSUFFICIENT_FUNDS"
      ],
      "default": "ERROR_CODES_UNSPECIFIED",
      "description": "",
      "title": "ErrorCodes"
    },
    "coinbase.simple_trade.ErrorCta": {
      "type": "string",
      "enum": [
        "ERROR_CTA_UNSPECIFIED",
        "ERROR_CTA_BUY_MINIMUM",
        "ERROR_CTA_BUY_MAXIMUM",
        "ERROR_CTA_BUY_INSUFFICIENT_BALANCE",
        "ERROR_CTA_SELL_MINIMUM",
        "ERROR_CTA_SELL_ALL",
        "ERROR_CTA_SWITCH_PAYMENT",
        "ERROR_CTA_SELL_MAXIMUM"
      ],
      "default": "ERROR_CTA_UNSPECIFIED",
      "title": "ErrorCta"
    },
    "coinbase.simple_trade.Fee": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "amount": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "label": {
          "type": "string"
        },
        "disclosure": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.simple_trade.Disclosure"
            }
          ]
        }
      },
      "description": "Fee represents a single fee type. A single trade may have multiple fees."
    },
    "coinbase.simple_trade.ScaledAmount": {
      "type": "object",
      "properties": {
        "amount": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "scale": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "ScaledAmount provides a scale for reference with the common amount"
    },
    "coinbase.simple_trade.SubscriptionInfo": {
      "type": "object",
      "properties": {
        "free_trading_reset_date": {
          "type": "string",
          "format": "RFC3339 Timestamp"
        },
        "used_zero_fee_trading": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "remaining_free_trading_volume": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "max_free_trading_volume": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "has_benefit_cap": {
          "type": "boolean"
        },
        "applied_subscription_benefit": {
          "type": "boolean"
        },
        "fee_without_subscription_benefit": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "payment_method_fee_without_subscription_benefit": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        }
      },
      "title": "SubscriptionInfo is the user's coinbase one subscription info for the trade"
    },
    "coinbase.simple_trade.TaxInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "amount": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        }
      },
      "title": "TaxInfo contains all the information of any tax which is applicable for a trade"
    },
    "coinbase.simple_trade.TradeIncentiveInfo": {
      "type": "object",
      "properties": {
        "applied_incentive": {
          "type": "boolean"
        },
        "user_incentive_id": {
          "type": "string"
        },
        "code_val": {
          "type": "string"
        },
        "ends_at": {
          "type": "string",
          "format": "RFC3339 Timestamp"
        },
        "fee_without_incentive": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Amount"
            }
          ]
        },
        "redeemed": {
          "type": "boolean"
        }
      },
      "title": "TradeIncentiveInfo contains the user's simple trade incentive info for the trade"
    },
    "coinbase.simple_trade.TradeIncentiveMetadata": {
      "type": "object",
      "properties": {
        "user_incentive_id": {
          "type": "string",
          "description": "The user incentive id."
        },
        "code_val": {
          "type": "string",
          "description": "A promo code for waiving fees."
        }
      },
      "title": "TradeIncentiveMetadata"
    },
    "coinbase.simple_trade.TradeStatus": {
      "type": "string",
      "enum": [
        "TRADE_STATUS_UNSPECIFIED",
        "TRADE_STATUS_CREATED",
        "TRADE_STATUS_STARTED",
        "TRADE_STATUS_COMPLETED",
        "TRADE_STATUS_CANCELED"
      ],
      "default": "TRADE_STATUS_UNSPECIFIED",
      "title": "TradeStatus"
    },
    "coinbase.simple_trade.UnitPrice": {
      "type": "object",
      "properties": {
        "target_to_fiat": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.simple_trade.ScaledAmount"
            }
          ]
        },
        "target_to_source": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.simple_trade.ScaledAmount"
            }
          ]
        },
        "source_to_fiat": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.simple_trade.ScaledAmount"
            }
          ]
        }
      },
      "title": "UnitPrice represents the price of a currency to fiat and to the source of trade. For fiat trades target_to_fiat may be equivalent to target_to_source"
    },
    "coinbase.simple_trade.UserWarning": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.consumer.shared.common.Link"
            }
          ]
        },
        "context": {
          "allOf": [
            {
              "$ref": "#/definitions/coinbase.simple_trade.UserWarningContext"
            }
          ]
        },
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "UserWarning provides context on the user warning and if it should be visible to the user"
    },
    "coinbase.simple_trade.UserWarningContext": {
      "type": "object",
      "properties": {
        "details": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string"
        },
        "link_text": {
          "type": "string"
        }
      },
      "title": "UserWarningContext provides details into the user warning. Used for certain payment warnings"
    },
    "google.protobuf.Any": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "grpc.gateway.runtime.Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/google.protobuf.Any"
          }
        }
      }
    }
  },
  "x-readme": {
    "explorer-enabled": false,
    "samples-enabled": false,
    "headers": [
      {
        "key": "CB-ACCESS-KEY",
        "value": "$ACCESS_KEY"
      },
      {
        "key": "CB-ACCESS-SIGN",
        "value": "$SIGNATURE"
      },
      {
        "key": "CB-ACCESS-TIMESTAMP",
        "value": "$TIMESTAMP"
      }
    ]
  }
}